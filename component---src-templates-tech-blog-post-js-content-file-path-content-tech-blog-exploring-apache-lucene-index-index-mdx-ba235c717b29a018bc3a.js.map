{"version":3,"file":"component---src-templates-tech-blog-post-js-content-file-path-content-tech-blog-exploring-apache-lucene-index-index-mdx-ba235c717b29a018bc3a.js","mappings":"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","sources":["webpack://j.blaszyk.me/./content/tech-blog/exploring-apache-lucene-index/index.mdx","webpack://j.blaszyk.me/./src/templates/tech-blog-post.js"],"sourcesContent":["/*@jsxRuntime classic @jsx React.createElement @jsxFrag React.Fragment*/\nimport {useMDXComponents as _provideComponents} from \"@mdx-js/react\";\nimport React from \"react\";\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    p: \"p\",\n    a: \"a\",\n    blockquote: \"blockquote\",\n    em: \"em\",\n    h2: \"h2\",\n    span: \"span\",\n    ul: \"ul\",\n    li: \"li\",\n    strong: \"strong\",\n    h4: \"h4\",\n    h3: \"h3\",\n    img: \"img\"\n  }, _provideComponents(), props.components), {ImageComponent} = _components;\n  if (!ImageComponent) _missingMdxReference(\"ImageComponent\", true);\n  return React.createElement(React.Fragment, null, React.createElement(_components.p, null, \"When I joined Yelp in 2020, as a software engineer, I became part of the Ranking Platform team. The team is responsible for the development and maintenance of Yelp’s search and ranking infrastructure, a crucial part of our ecosystem, that allows for business search, reviews search and powers the internal real-time ad bidding system. At that time, I was part of an initiative to revamp our core search & ranking infra in terms of performance and cost efficiency. This effort resulted in an open-source project - \", React.createElement(_components.a, {\n    href: \"https://github.com/Yelp/nrtsearch\",\n    target: \"_blank\",\n    rel: \"nofollow noopener noreferrer\"\n  }, \"nrtsearch\"), \" - which, as of early 2023, is used for the majority of search and ranking use cases at Yelp, with more migrations underway set to replace Elasticsearch. With nrtsearch our p50s, p95s and p99s improved by 30-50% while costs dropped by as much as 40% in some cases. You can read more about the nrtsearch project results in the blog post from Yelp’s Engineering Blog:\"), \"\\n\", React.createElement(_components.blockquote, null, \"\\n\", React.createElement(_components.p, null, React.createElement(_components.a, {\n    href: \"https://engineeringblog.yelp.com/2021/09/nrtsearch-yelps-fast-scalable-and-cost-effective-search-engine.html\",\n    target: \"_blank\",\n    rel: \"nofollow noopener noreferrer\"\n  }, \"Nrtsearch: Yelp’s Fast, Scalable and Cost Effective Search Engine\")), \"\\n\"), \"\\n\", React.createElement(_components.p, null, \"Nrtsearch development was led by senior folks, industry experts who know ins and outs of Apache Lucene - the core search library on top of which nrtsearch was built. I worked on well-scoped projects, like scalable ingestion, logging, plugin development and scatter-gather service, which allows for application-level cluster sharding. While I enjoyed those projects, I feel that, for a long time, I treated the nrtsearch core search functionality as a black-box - not fully understanding its internals. Therefore, I decided to take a step back, explore, and understand Apache Lucene - a search library at the core of nrtsearch and Elasticsearch (Elastic - a company built around Elasticsearch has a market cap of 5B$).\"), \"\\n\", React.createElement(_components.p, null, \"This is the first tech blog post from the series \", React.createElement(_components.em, null, \"Exploring Apache Lucene\"), \" in which I’ll describe, in the bottom-up manner, the building blocks of modern search engines.\"), \"\\n\", React.createElement(_components.h2, {\n    id: \"lucenes-jargon\",\n    style: {\n      position: \"relative\"\n    }\n  }, React.createElement(_components.a, {\n    href: \"#lucenes-jargon\",\n    \"aria-label\": \"lucenes jargon permalink\",\n    className: \"anchor before\"\n  }, React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<svg aria-hidden=\\\"true\\\" focusable=\\\"false\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg>\"\n    }\n  })), \"Lucene’s jargon\"), \"\\n\", React.createElement(_components.p, null, \"Before starting, I want to explain some terms closely linked to Apache Lucene. They don’t necessarily map 1:1 to other DB technologies, what is at times confusing when reading Lucene’s docs and related blog posts.\"), \"\\n\", React.createElement(_components.ul, null, \"\\n\", React.createElement(_components.li, null, React.createElement(_components.strong, null, \"document\"), \" - a record, the unit of search and index, a set of fields. Documents are added to a Lucene index, and can be retrieved by a search query.\"), \"\\n\", React.createElement(_components.li, null, React.createElement(_components.strong, null, \"field\"), \" - a typed slot in a document. A field is a sequence of terms. Document can have multiple fields.\"), \"\\n\", React.createElement(_components.li, null, React.createElement(_components.strong, null, \"term\"), \" - a value from the source document, the unit of search. Used for building the inverted index\"), \"\\n\", React.createElement(_components.li, null, React.createElement(_components.strong, null, \"index\"), \" - a collection of documents, typically with the same schema.\"), \"\\n\", React.createElement(_components.li, null, React.createElement(_components.strong, null, \"inverted index\"), \" - an internal data structure that maps terms to documents by ID, efficient for text-search queries.\"), \"\\n\", React.createElement(_components.li, null, React.createElement(_components.strong, null, \"stored fields\"), \" - an array of all field values per field, in document order, stored in index in non-inverted manner. Efficient for getting many field values for a few docs.\"), \"\\n\", React.createElement(_components.li, null, React.createElement(_components.strong, null, \"doc values\"), \" - Lucene’s column-stride field value storage. Efficient for getting a few field values for many docs. Useful for sorting and faceting.\"), \"\\n\", React.createElement(_components.li, null, React.createElement(_components.strong, null, \"index segments\"), \" - Lucene indexes may be composed of multiple sub-indexes, or segments. Each segment is a fully independent index, which could be searched separately.\"), \"\\n\"), \"\\n\", React.createElement(_components.h2, {\n    id: \"representing-data-with-lucene\",\n    style: {\n      position: \"relative\"\n    }\n  }, React.createElement(_components.a, {\n    href: \"#representing-data-with-lucene\",\n    \"aria-label\": \"representing data with lucene permalink\",\n    className: \"anchor before\"\n  }, React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<svg aria-hidden=\\\"true\\\" focusable=\\\"false\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg>\"\n    }\n  })), \"Representing data with Lucene\"), \"\\n\", React.createElement(_components.h4, {\n    id: \"inverted-index\",\n    style: {\n      position: \"relative\"\n    }\n  }, React.createElement(_components.a, {\n    href: \"#inverted-index\",\n    \"aria-label\": \"inverted index permalink\",\n    className: \"anchor before\"\n  }, React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<svg aria-hidden=\\\"true\\\" focusable=\\\"false\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg>\"\n    }\n  })), \"Inverted Index\"), \"\\n\", React.createElement(_components.p, null, \"Inverted index is a data structure that maps terms (i.e. words or phrases) to the documents that contain them. The index is built by analyzing the text of the documents and extracting terms from them. The inverted index allows for fast and efficient searching by providing a way to look up documents that contain a specific term or set of terms. It also provides a way to rank the relevance of the search results by determining how many of the search terms match to a specific document.\"), \"\\n\", React.createElement(_components.p, null, \"The inverted index is composed of two substructures:\"), \"\\n\", React.createElement(_components.ul, null, \"\\n\", React.createElement(_components.li, null, React.createElement(_components.strong, null, \"term dictionary\"), \" - groups all the terms included in the documents in a \", React.createElement(_components.strong, null, \"sorted\"), \" list.\"), \"\\n\", React.createElement(_components.li, null, React.createElement(_components.strong, null, \"postings list\"), \" - creates a list of each term, indicating the documents where the term appears.\"), \"\\n\"), \"\\n\", React.createElement(ImageComponent, {\n    image: props.data.mdx.frontmatter.blogImages[0],\n    alt: \"Apache Lucene Inverted Index\"\n  }), \"\\n\", React.createElement(_components.p, null, \"In the above example we can see three documents indexed into Lucene’s inverted index. Each of the document’s conten is analyzed (tokenized) into terms which are inserted into inverted index.\"), \"\\n\", React.createElement(_components.p, null, \"Since the terms in the dictionary are sorted, we can quickly find a term (think binary search), and subsequently its occurrences in the postings-structure. This is contrary to a “forward index”, which lists terms related to a specific document.\"), \"\\n\", React.createElement(_components.h4, {\n    id: \"docvalues\",\n    style: {\n      position: \"relative\"\n    }\n  }, React.createElement(_components.a, {\n    href: \"#docvalues\",\n    \"aria-label\": \"docvalues permalink\",\n    className: \"anchor before\"\n  }, React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<svg aria-hidden=\\\"true\\\" focusable=\\\"false\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg>\"\n    }\n  })), \"DocValues\"), \"\\n\", React.createElement(_components.p, null, \"Inverted index builds a mapping of terms found in all the documents in the index to a list of documents that the term appears in. This makes search very fast - since users search by terms, having a ready list of term-to-document values makes the query process faster.\"), \"\\n\", React.createElement(_components.p, null, \"For other features that are associated with search, such as sorting, faceting, and highlighting, this approach is not very efficient. The faceting engine, for example, must look up each term that appears in each document that will make up the result set and pull the document IDs to build the facet list.\"), \"\\n\", React.createElement(_components.p, null, \"DocValue fields are column-oriented fields with a document-to-value mapping built at index time - an uninverted (forward) index. This approach can make lookups for faceting, sorting, and grouping much faster, as we can retrieve fields for multiple docs with the single disk seek (utilizing the filesystem cache).\"), \"\\n\", React.createElement(_components.p, null, \"DocValues should be preferred over “stored fields” unless the complete document is being retrieved by a query.\"), \"\\n\", React.createElement(_components.h4, {\n    id: \"stored-fields\",\n    style: {\n      position: \"relative\"\n    }\n  }, React.createElement(_components.a, {\n    href: \"#stored-fields\",\n    \"aria-label\": \"stored fields permalink\",\n    className: \"anchor before\"\n  }, React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<svg aria-hidden=\\\"true\\\" focusable=\\\"false\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg>\"\n    }\n  })), \"Stored Fields\"), \"\\n\", React.createElement(_components.p, null, \"Similar to DocValues, Stored fields have been created to effectively persist values (differently to how inverted index does it) of the document fields, and then, retrieve them when needed.\"), \"\\n\", React.createElement(_components.p, null, \"Stored fields are organised in a row manner. This means that, given a set of fields, for each document, the values of these fields are concatenated in a row. The rows are then stored sequentially on disk according to their Lucene doc id. Each row may have a different size depending on the number of fields defined for that document and data types (e.g. string or text fields have variable sizes). The pointers to each row are stored for allowing fast access to them.\"), \"\\n\", React.createElement(_components.p, null, \"This technique is particularly useful if our search query needs to return complete documents (with all their fields) rather than just a few fields.\"), \"\\n\", React.createElement(_components.p, null, React.createElement(_components.em, null, \"DocValues\"), \" and \", React.createElement(_components.em, null, \"Stored fields\"), \" approached are not mutually exclusive settings, a given field, apart from being indexed into the inverted index, can have DocValues and Stored fields enabled. The queries that will be run against the index should determine which of these approaches is used. It’s important to keep in mind that both of approached are effectively duplicating data and storing them in a format suitable for specific the access pattern - so enabling both may result in a bloated index size.\"), \"\\n\", React.createElement(_components.h3, {\n    id: \"insertions\",\n    style: {\n      position: \"relative\"\n    }\n  }, React.createElement(_components.a, {\n    href: \"#insertions\",\n    \"aria-label\": \"insertions permalink\",\n    className: \"anchor before\"\n  }, React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<svg aria-hidden=\\\"true\\\" focusable=\\\"false\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg>\"\n    }\n  })), \"Insertions\"), \"\\n\", React.createElement(_components.p, null, \"When building inverted indexes, we need to prioritize things like: search speed, index compactness, indexing speed and the time it takes for new changes to become visible. Search speed and index compactness are related: when searching over a smaller index, less data needs to be processed, and more of it will fit in memory. Both, particularly compactness, come at the cost of indexing speed.\"), \"\\n\", React.createElement(_components.p, null, \"To minimize index sizes, various compression techniques are used. For example, when storing the postings (which can get quite large), Lucene does tricks like delta-encoding - e.g. \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">[1, 9, 420]</code>\"\n    }\n  }), \" is stored as \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">[1, 8, 411]</code>\"\n    }\n  }), \" - so small numbers can be saved with less bytes.\"), \"\\n\", React.createElement(_components.p, null, \"When new documents are added, the index changes are first buffered in memory. Eventually, the index files in their entirety, are flushed to disk. The written files make up an index segment.\"), \"\\n\", React.createElement(ImageComponent, {\n    image: props.data.mdx.frontmatter.blogImages[1],\n    alt: \"Apache Lucene Segment Merges\"\n  }), \"\\n\", React.createElement(_components.p, null, \"Lucene index segments are “write-once” files: once a segment has been written to permanent storage (to disk), it is never altered. This means that indexes are actually comprised of several files which are each subsets of the full index. To prevent eternal fragmentation of the index, segments are periodically merged. In the example above (\", React.createElement(_components.a, {\n    href: \"https://speakerdeck.com/elasticsearch/what-is-in-a-lucene-index?slide=11\",\n    target: \"_blank\",\n    rel: \"nofollow noopener noreferrer\"\n  }, \"source\"), \") we have two segments, each consisting of a single document. On the right side of the image, we can see a result of a segment merge - where 2 segments are merged to form a new segment.\"), \"\\n\", React.createElement(_components.h3, {\n    id: \"deletions\",\n    style: {\n      position: \"relative\"\n    }\n  }, React.createElement(_components.a, {\n    href: \"#deletions\",\n    \"aria-label\": \"deletions permalink\",\n    className: \"anchor before\"\n  }, React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<svg aria-hidden=\\\"true\\\" focusable=\\\"false\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg>\"\n    }\n  })), \"Deletions\"), \"\\n\", React.createElement(_components.p, null, \"For each segment, Lucene maintains a per-segment bitset (vector of 0 and 1s). Flipping a bit from 1 to 0 signals to Lucene that a document is deleted. All subsequent searches simply skip any deleted documents. It is not until segments are merged that the bytes consumed by deleted documents are reclaimed, as after the merge the resulting segment won’t contain deleted documents. Deleting the documents in-place in the existing segment would be far too costly.\"), \"\\n\", React.createElement(_components.h3, {\n    id: \"updates\",\n    style: {\n      position: \"relative\"\n    }\n  }, React.createElement(_components.a, {\n    href: \"#updates\",\n    \"aria-label\": \"updates permalink\",\n    className: \"anchor before\"\n  }, React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<svg aria-hidden=\\\"true\\\" focusable=\\\"false\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg>\"\n    }\n  })), \"Updates\"), \"\\n\", React.createElement(_components.p, null, \"Updating a previously indexed document is a “cheap” delete followed by a re-insertion of the document. This means that updating a document is even more expensive than adding it in the first place. Thus, storing things like rapidly changing values in a Lucene index is probably not a good idea – there is no in-place update of values.\"), \"\\n\", React.createElement(_components.h3, {\n    id: \"visualising-lucenes-segment-merges\",\n    style: {\n      position: \"relative\"\n    }\n  }, React.createElement(_components.a, {\n    href: \"#visualising-lucenes-segment-merges\",\n    \"aria-label\": \"visualising lucenes segment merges permalink\",\n    className: \"anchor before\"\n  }, React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<svg aria-hidden=\\\"true\\\" focusable=\\\"false\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg>\"\n    }\n  })), \"Visualising Lucene’s segment merges\"), \"\\n\", React.createElement(_components.p, null, \"Below there is a visualisation of how Lucene handles insertions, deletion and segment merges (taken from this great \", React.createElement(_components.a, {\n    href: \"https://blog.mikemccandless.com/2011/02/visualizing-lucenes-segment-merges.html\",\n    target: \"_blank\",\n    rel: \"nofollow noopener noreferrer\"\n  }, \"blog post\"), \" by Michael McCandless). Each segment is a bar, whose height is the size (in MB) of the segment. Segments on the left are the largest; as new segments are flushed, they appear on the right. The dark grey band on top of each segment shows the proportion of deletions in that segment.\"), \"\\n\", React.createElement(_components.img, {\n    src: \"/d354b960d0be76123bf1819fc104cf73/segment_merges.gif\",\n    alt: \"Lucene segment merges\"\n  }), \"\\n\", React.createElement(_components.h3, {\n    id: \"lucenes-data-storage-architecture-pros-and-cons\",\n    style: {\n      position: \"relative\"\n    }\n  }, React.createElement(_components.a, {\n    href: \"#lucenes-data-storage-architecture-pros-and-cons\",\n    \"aria-label\": \"lucenes data storage architecture pros and cons permalink\",\n    className: \"anchor before\"\n  }, React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<svg aria-hidden=\\\"true\\\" focusable=\\\"false\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg>\"\n    }\n  })), \"Lucene’s data storage architecture: pros and cons\"), \"\\n\", React.createElement(_components.ul, null, \"\\n\", React.createElement(_components.li, null, \"(-) Document insertions require writing a new segment. Which can be costly for single-document insertions. Therefore bulk inserts are preferred.\"), \"\\n\", React.createElement(_components.li, null, \"(+) Segments are never modified in-place, so they are filesystem cache-friendly. Segments can be searched concurrently lock-free, with no risk of race conditions. It also allows for concurrent query execution.\"), \"\\n\", React.createElement(_components.li, null, \"(+) The inverted index allows for fast and efficient searching by providing a way to look up documents that contain a specific term or set of terms.\"), \"\\n\", React.createElement(_components.li, null, \"(+) Terms compression. Deduplication of terms within a segment, it can save a lot of space for very high-frequency terms.\"), \"\\n\", React.createElement(_components.li, null, \"(+) Terms are uniquely identified by an ordinal, useful for sorting and faceting.\"), \"\\n\", React.createElement(_components.li, null, \"(+) DocValues optimization can help with efficient sorting and faceting. Stored fields can help with retrieving whole documents.\"), \"\\n\"), \"\\n\", React.createElement(_components.p, null, \"Exploring Lucene series is continued in \", React.createElement(_components.a, {\n    href: \"/tech-blog/exploring-apache-lucene-search-and-ranking/\"\n  }, \"Exploring Apache Lucene - Part 2: Search and Ranking\"), \" and \", React.createElement(_components.a, {\n    href: \"/tech-blog/exploring-apache-lucene-scale/\"\n  }, \"Exploring Apache Lucene - Part 3: Running at Scale\"), \".\"));\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? React.createElement(MDXLayout, props, React.createElement(_createMdxContent, props)) : _createMdxContent(props);\n}\nexport default MDXContent;\nfunction _missingMdxReference(id, component) {\n  throw new Error(\"Expected \" + (component ? \"component\" : \"object\") + \" `\" + id + \"` to be defined: you likely forgot to import, pass, or provide it.\");\n}\n","import GATSBY_COMPILED_MDX from \"/Users/jedr/personal-blog/content/tech-blog/exploring-apache-lucene-index/index.mdx\";\nimport React from 'react';\nimport {Link, graphql} from 'gatsby';\nimport get from 'lodash/get';\nimport {MDXProvider} from '@mdx-js/react';\nimport {getSrc} from 'gatsby-plugin-image';\nimport '../fonts/fonts-post.css';\nimport Bio from '../components/Bio';\nimport Layout from '../components/Layout';\nimport SEO from '../components/SEO';\nimport ImageGallery from '../components/ImageGallery';\nimport ImageComponent from '../components/ImageComponent';\nimport LazyIframe from '../components/LazyIframe';\nimport Comments from '../components/Comments';\nimport {Container, Column, MakeItBigContainer, ThreePhotosContainer} from '../components/layout/Container';\nimport {formatPostDate, formatReadingTime} from '../utils/helpers';\nimport {rhythm, scale} from '../utils/typography';\nimport {StatefulSliderPicker, StatefulBlockPicker} from '../components/ColorPicker';\nimport TableOfContents from '../components/TableOfContents';\nimport 'katex/dist/katex.min.css';\nimport './blog-post.css';\nconst shortcodes = {\n  Link,\n  ImageGallery,\n  ImageComponent,\n  Container,\n  Column,\n  MakeItBigContainer,\n  ThreePhotosContainer,\n  LazyIframe,\n  StatefulSliderPicker,\n  StatefulBlockPicker\n};\nclass TechBlogPostTemplate extends React.Component {\n  render() {\n    const {children} = this.props;\n    const post = this.props.data.mdx;\n    const siteTitle = get(this.props, 'data.site.siteMetadata.title');\n    const siteUrl = get(this.props, 'data.site.siteMetadata.siteUrl');\n    let {previous, next} = this.props.pageContext;\n    const ogimage = post.frontmatter.ogimage;\n    const ogImagePath = ogimage && getSrc(ogimage);\n    const category = get(post, 'fields.category');\n    const postUrl = `${siteUrl}/${category}${post.fields.slug}`;\n    const structuredData = {\n      '@context': 'https://schema.org',\n      '@type': 'BlogPosting',\n      headline: post.frontmatter.title,\n      datePublished: post.frontmatter.date,\n      url: postUrl,\n      author: [{\n        '@type': 'Person',\n        name: 'Jedr Blaszyk',\n        url: 'https://j.blaszyk.me/'\n      }]\n    };\n    return React.createElement(Layout, {\n      location: this.props.location,\n      title: siteTitle,\n      tocComponent: React.createElement(TableOfContents, post.tableOfContents)\n    }, React.createElement(SEO, {\n      title: post.frontmatter.title,\n      description: post.frontmatter.spoiler,\n      slug: post.fields.slug,\n      image: ogImagePath,\n      structuredData: structuredData,\n      meta: [{\n        property: 'og:type',\n        content: 'article'\n      }, {\n        property: 'og:article:published_time',\n        content: post.frontmatter.date\n      }, {\n        property: 'og:article:author',\n        content: 'https://j.blaszyk.me/about/'\n      }]\n    }), React.createElement(\"main\", null, React.createElement(\"article\", {\n      className: \"post\"\n    }, React.createElement(\"header\", {\n      id: \"post-header\"\n    }, React.createElement(\"h1\", {\n      style: {\n        color: 'var(--textTitle)',\n        marginTop: '1.5rem',\n        marginBottom: '0.5rem'\n      }\n    }, post.frontmatter.title), React.createElement(Link, {\n      style: {\n        boxShadow: 'none',\n        textDecoration: 'none',\n        color: 'var(--textLink)',\n        fontFamily: 'Montserrat, sans-serif'\n      },\n      to: `/tech-blog/`,\n      rel: \"bookmark\"\n    }, React.createElement(\"p\", null, 'Tech Blog')), React.createElement(\"p\", {\n      style: {\n        ...scale(-1 / 5),\n        display: 'block',\n        marginBottom: rhythm(1),\n        marginTop: rhythm(-4 / 5)\n      }\n    }, formatPostDate(post.frontmatter.date), React.createElement(\"span\", {\n      style: {\n        margin: '0 0.15rem'\n      }\n    }, ` • `), formatReadingTime(post.fields.timeToRead.minutes))), React.createElement(MDXProvider, {\n      components: shortcodes\n    }, children))), React.createElement(\"aside\", null, React.createElement(\"nav\", null, React.createElement(\"ul\", {\n      style: {\n        display: 'flex',\n        flexWrap: 'wrap',\n        justifyContent: 'space-between',\n        listStyle: 'none',\n        padding: 0,\n        marginLeft: 0\n      }\n    }, React.createElement(\"li\", null, previous && React.createElement(Link, {\n      to: `/${category}${previous.fields.slug}`,\n      rel: \"prev\"\n    }, \"← \", previous.frontmatter.title)), React.createElement(\"li\", null, next && React.createElement(Link, {\n      to: `/${category}${next.fields.slug}`,\n      rel: \"next\"\n    }, next.frontmatter.title, \" →\")))), React.createElement(\"h3\", {\n      style: {\n        fontFamily: 'Montserrat, sans-serif',\n        marginTop: rhythm(0.25)\n      }\n    }, React.createElement(Link, {\n      style: {\n        boxShadow: 'none',\n        textDecoration: 'none',\n        color: 'var(--textLink)',\n        fontSize: rhythm(4 / 5)\n      },\n      to: '/'\n    }, \"Jedr's Blog\"), ' • ', React.createElement(Link, {\n      style: {\n        boxShadow: 'none',\n        textDecoration: 'none',\n        color: 'var(--textLink)',\n        fontSize: rhythm(4 / 5)\n      },\n      to: '/tech-blog/'\n    }, \"Tech Blog\")), React.createElement(\"aside\", {\n      style: {\n        width: '100%',\n        backgroundColor: 'var(--bg-header)',\n        borderRadius: '1em',\n        padding: '1.2em 0.6em',\n        marginBottom: '1.5rem'\n      }\n    }, React.createElement(Bio, {\n      style: {\n        marginBottom: 0\n      },\n      size: \"l\"\n    })), React.createElement(Comments, {\n      url: postUrl,\n      id: post.fields.slug,\n      title: post.frontmatter.title\n    })));\n  }\n}\nTechBlogPostTemplate\nexport default function GatsbyMDXWrapper(props) {\n  return React.createElement(TechBlogPostTemplate, props, React.createElement(GATSBY_COMPILED_MDX, props));\n}\nexport const pageQuery = graphql`\n  query TechBlogPostBySlug($slug: String!) {\n    site {\n      siteMetadata {\n        title\n        author\n        siteUrl\n      }\n    }\n    mdx(fields: { slug: { eq: $slug } }) {\n      id\n      tableOfContents\n      frontmatter {\n        title\n        date(formatString: \"MMMM DD, YYYY\")\n        spoiler\n        ogimage {\n          childImageSharp {\n            gatsbyImageData(width: 960, layout: FIXED)\n          }\n        }\n        images {\n          childImageSharp {\n            gatsbyImageData(width: 1400, layout: CONSTRAINED, quality: 90)\n          }\n        }\n        blogImages {\n          childImageSharp {\n            gatsbyImageData(width: 1400, layout: CONSTRAINED, quality: 90)\n          }\n        }\n      }\n      fields {\n        slug\n        category\n        timeToRead {\n          minutes\n        }\n      }\n    }\n  }\n`;\n"],"names":["_createMdxContent","props","_components","Object","assign","p","a","blockquote","em","h2","span","ul","li","strong","h4","h3","img","_provideComponents","components","ImageComponent","id","component","Error","_missingMdxReference","React","href","target","rel","style","position","className","dangerouslySetInnerHTML","__html","image","data","mdx","frontmatter","blogImages","alt","src","wrapper","MDXLayout","shortcodes","Link","ImageGallery","Container","Column","MakeItBigContainer","ThreePhotosContainer","LazyIframe","StatefulSliderPicker","StatefulBlockPicker","TechBlogPostTemplate","_React$Component","apply","arguments","_inheritsLoose","prototype","render","children","this","post","siteTitle","get","siteUrl","previous","next","pageContext","ogimage","ogImagePath","getSrc","category","postUrl","fields","slug","structuredData","headline","title","datePublished","date","url","author","name","Layout","location","tocComponent","TableOfContents","tableOfContents","SEO","description","spoiler","meta","property","content","color","marginTop","marginBottom","boxShadow","textDecoration","fontFamily","to","scale","display","rhythm","formatPostDate","margin","formatReadingTime","timeToRead","minutes","MDXProvider","flexWrap","justifyContent","listStyle","padding","marginLeft","fontSize","width","backgroundColor","borderRadius","Bio","size","Comments","GatsbyMDXWrapper","GATSBY_COMPILED_MDX"],"sourceRoot":""}