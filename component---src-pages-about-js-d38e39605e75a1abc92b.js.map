{"version":3,"file":"component---src-pages-about-js-d38e39605e75a1abc92b.js","mappings":"mJAuBA,SAASA,EAAGC,GAQR,IARS,KACXC,EAAI,MACJC,EAAK,MACLC,EAAK,YACLC,EAAW,KACXC,EAAI,KACJC,EAAO,KAAI,eACXC,EAAiB,MAClBP,EACC,OACEQ,EAAAA,cAACC,EAAAA,YAAW,CACVC,MA7BK,aA8BLC,OAASC,IACP,MAAM,aAAEC,GAAiBD,EAAKE,KACxBC,EAAkBX,GAAeS,EAAaT,YAC9CY,EAAG,GAAMH,EAAaI,QAAUZ,EAChCa,EAAiB,GAAML,EAAaI,QAAUf,EACpD,OACEM,EAAAA,cAACW,EAAAA,EAAMC,OAAAC,OAAA,CACLC,eAAgB,CAAEhB,SACbH,EACD,CACEoB,cAAc,QAASV,EAAaV,MACpCA,SAEF,CACEA,MAAM,GAAIU,EAAaV,OACxB,CACLF,KAAM,CACJ,CACEuB,KAAM,cACNC,QAASV,GAEX,CACEW,SAAU,SACVD,QAAST,GAEX,CACEU,SAAU,WACVD,QAAStB,GAASU,EAAaV,OAEjC,CACEuB,SAAU,iBACVD,QAASV,GAEX,CACEW,SAAU,eACVD,QAASZ,EAAaV,OAExB,CACEuB,SAAU,SACVD,QAAS,iBAEX,CACED,KAAM,eACNC,QAAS,uBAEX,CACED,KAAM,kBACNC,QAASZ,EAAac,OAAOC,SAE/B,CACEJ,KAAM,iBACNC,QAASZ,EAAagB,QAExB,CACEL,KAAM,cACNC,QAAST,GAEX,CACEQ,KAAM,gBACNC,QAAStB,GAASU,EAAaV,OAEjC,CACEqB,KAAM,sBACNC,QAASV,IAGVe,OACC5B,EACI,CACE,CACEwB,SAAU,WACVD,QAASP,GAEX,CACEM,KAAM,gBACNC,QAASP,IAGb,IAELY,OAAO7B,KAGTM,GACCC,EAAAA,cAAA,UAAQuB,KAAK,uBACVC,KAAKC,UAAU1B,IAGb,GAKnB,CAEAR,EAAImC,aAAe,CACjBjC,KAAM,GACNE,MAAO,GACPE,KAAM,IAWR,K,qGC1IoC,IAE9B8B,EAAY,SAAAC,GAAA,SAAAD,IAAA,OAAAC,EAAAC,MAAA,KAAAC,YAAA,KA8Cf,OA9CeC,EAAAA,EAAAA,GAAAJ,EAAAC,GAAAD,EAAAK,UAChB7B,OAAA,WACE,MAAM8B,EAAYC,IAAIC,KAAM,sCAC5B,OACEnC,EAAAA,cAACoC,EAAAA,EAAM,CAACC,SAAUF,KAAKG,MAAMD,SAAU1C,MAAOsC,GAC5CjC,EAAAA,cAACT,EAAAA,EAAG,CACFI,MAAO,QACPE,KAAM,SACNJ,KAAM,CACJ,CACEyB,SAAU,UACVD,QAAS,WAEX,CACEC,SAAU,wBACVD,QAAS,QAEX,CACEC,SAAU,uBACVD,QAAS,cAIfjB,EAAAA,cAAA,YACEA,EAAAA,cAAA,MAAIuC,MAAO,CAAEC,UAAW,IAAK,SAC7BxC,EAAAA,cAAA,SAAG,sDACmD,IACpDA,EAAAA,cAAA,KAAGyC,KAAK,0BAA0BC,OAAO,UAAS,WAE9C,6DACuD,IAC3D1C,EAAAA,cAAA,KAAGyC,KAAK,wBAAwBC,OAAO,UAAS,QAE5C,qBACe,IACnB1C,EAAAA,cAAA,KAAGyC,KAAK,8BAA6B,eAAe,KAEtDzC,EAAAA,cAAA,SAAG,gCAEHA,EAAAA,cAAA,MAAIuC,MAAO,CAAEC,UAAW,IAAK,WAC7BxC,EAAAA,cAAA,SAAG,uBACmBA,EAAAA,cAAA,KAAGyC,KAAK,uBAAsB,gBAAgB,MAK5E,EAACd,CAAA,CA9Ce,CAAS3B,EAAAA,WA4D3B,W","sources":["webpack://j.blaszyk.me/./src/components/SEO.js","webpack://j.blaszyk.me/./src/pages/about.js"],"sourcesContent":["import React from 'react';\nimport Helmet from 'react-helmet';\nimport PropTypes from 'prop-types';\nimport { StaticQuery, graphql } from 'gatsby';\n\nconst query = graphql`\n  query GetSiteMetadata {\n    site {\n      siteMetadata {\n        title\n        author\n        description\n        siteUrl\n        domain\n        social {\n          twitter\n        }\n        image\n      }\n    }\n  }\n`;\n\nfunction SEO({\n  meta,\n  image,\n  title,\n  description,\n  slug,\n  lang = 'en',\n  structuredData = null,\n}) {\n  return (\n    <StaticQuery\n      query={query}\n      render={(data) => {\n        const { siteMetadata } = data.site;\n        const metaDescription = description || siteMetadata.description;\n        const url = `${siteMetadata.siteUrl}${slug}`;\n        const ogCustomImagePath = `${siteMetadata.siteUrl}${image}`;\n        return (\n          <Helmet\n            htmlAttributes={{ lang }}\n            {...(title\n              ? {\n                  titleTemplate: `%s — ${siteMetadata.title}`,\n                  title,\n                }\n              : {\n                  title: `${siteMetadata.title}`,\n                })}\n            meta={[\n              {\n                name: 'description',\n                content: metaDescription,\n              },\n              {\n                property: 'og:url',\n                content: url,\n              },\n              {\n                property: 'og:title',\n                content: title || siteMetadata.title,\n              },\n              {\n                property: 'og:description',\n                content: metaDescription,\n              },\n              {\n                property: 'og:site_name',\n                content: siteMetadata.title,\n              },\n              {\n                property: 'robots',\n                content: 'index, follow',\n              },\n              {\n                name: 'twitter:card',\n                content: 'summary_large_image',\n              },\n              {\n                name: 'twitter:creator',\n                content: siteMetadata.social.twitter,\n              },\n              {\n                name: 'twitter:domain',\n                content: siteMetadata.domain,\n              },\n              {\n                name: 'twitter:url',\n                content: url,\n              },\n              {\n                name: 'twitter:title',\n                content: title || siteMetadata.title,\n              },\n              {\n                name: 'twitter:description',\n                content: metaDescription,\n              },\n            ]\n              .concat(\n                image\n                  ? [\n                      {\n                        property: 'og:image',\n                        content: ogCustomImagePath,\n                      },\n                      {\n                        name: 'twitter:image',\n                        content: ogCustomImagePath,\n                      },\n                    ]\n                  : []\n              )\n              .concat(meta)}\n          >\n            {/* Structured data for rich SEO snippets */}\n            {structuredData && (\n              <script type=\"application/ld+json\">\n                {JSON.stringify(structuredData)}\n              </script>\n            )}\n          </Helmet>\n        );\n      }}\n    />\n  );\n}\n\nSEO.defaultProps = {\n  meta: [],\n  title: '',\n  slug: '',\n};\n\nSEO.propTypes = {\n  description: PropTypes.string,\n  image: PropTypes.string,\n  meta: PropTypes.array,\n  slug: PropTypes.string,\n  title: PropTypes.string.isRequired,\n};\n\nexport default SEO;\n","import React from 'react';\nimport { Link, graphql } from 'gatsby';\n\nimport get from 'lodash/get';\n\nimport Layout from '../components/Layout';\nimport SEO from '../components/SEO';\n\nclass NotFoundPage extends React.Component {\n  render() {\n    const siteTitle = get(this, 'props.data.site.siteMetadata.title');\n    return (\n      <Layout location={this.props.location} title={siteTitle}>\n        <SEO\n          title={'About'}\n          slug={'/about'}\n          meta={[\n            {\n              property: 'og:type',\n              content: 'profile',\n            },\n            {\n              property: 'og:profile:first_name',\n              content: 'Jedr',\n            },\n            {\n              property: 'og:profile:last_name',\n              content: 'Blaszyk',\n            },\n          ]}\n        />\n        <main>\n          <h1 style={{ marginTop: 0 }}>About</h1>\n          <p>\n            I'm a software engineer working on data ingestion @{' '}\n            <a href=\"https://www.elastic.co/\" target=\"_blank\">\n              Elastic\n            </a>\n            . Before, I worked on ranking systems and data ingestion @{' '}\n            <a href=\"https://www.yelp.com/\" target=\"_blank\">\n              Yelp\n            </a>\n            . I'm cycling with{' '}\n            <a href=\"https://hazaybikes.com/en/\">Hazay Bikes</a>.\n          </p>\n          <p>I'm based in Poznań, Poland.</p>\n\n          <h2 style={{ marginTop: 0 }}>Contact</h2>\n          <p>\n            You can reach me at <a href=\"mailto:j@blaszyk.me\">j@blaszyk.me</a>.\n          </p>\n        </main>\n      </Layout>\n    );\n  }\n}\n\nexport const pageQuery = graphql`\n  {\n    site {\n      siteMetadata {\n        title\n        description\n      }\n    }\n  }\n`;\n\nexport default NotFoundPage;\n"],"names":["SEO","_ref","meta","image","title","description","slug","lang","structuredData","React","StaticQuery","query","render","data","siteMetadata","site","metaDescription","url","siteUrl","ogCustomImagePath","Helmet","Object","assign","htmlAttributes","titleTemplate","name","content","property","social","twitter","domain","concat","type","JSON","stringify","defaultProps","NotFoundPage","_React$Component","apply","arguments","_inheritsLoose","prototype","siteTitle","get","this","Layout","location","props","style","marginTop","href","target"],"sourceRoot":""}