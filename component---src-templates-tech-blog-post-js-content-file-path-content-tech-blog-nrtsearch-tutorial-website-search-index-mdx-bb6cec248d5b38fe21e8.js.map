{"version":3,"file":"component---src-templates-tech-blog-post-js-content-file-path-content-tech-blog-nrtsearch-tutorial-website-search-index-mdx-bb6cec248d5b38fe21e8.js","mappings":"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","sources":["webpack://j.blaszyk.me/./content/tech-blog/nrtsearch-tutorial-website-search/index.mdx","webpack://j.blaszyk.me/./src/templates/tech-blog-post.js"],"sourcesContent":["/*@jsxRuntime classic @jsx React.createElement @jsxFrag React.Fragment*/\nimport {useMDXComponents as _provideComponents} from \"@mdx-js/react\";\nimport React from \"react\";\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    p: \"p\",\n    a: \"a\",\n    span: \"span\",\n    blockquote: \"blockquote\",\n    h2: \"h2\",\n    ul: \"ul\",\n    li: \"li\",\n    em: \"em\",\n    ol: \"ol\"\n  }, _provideComponents(), props.components), {ImageComponent} = _components;\n  if (!ImageComponent) _missingMdxReference(\"ImageComponent\", true);\n  return React.createElement(React.Fragment, null, React.createElement(_components.p, null, \"Let’s use \", React.createElement(_components.a, {\n    href: \"https://github.com/Yelp/nrtsearch\",\n    target: \"_blank\",\n    rel: \"nofollow noopener noreferrer\"\n  }, \"nrtsearch\"), \" - an open-source search engine built by Yelp - to support text search for any website. In this tutorial, I’m using my blog as an example dataset, but you can apply this approach to index any kind of data.\"), \"\\n\", React.createElement(_components.p, null, \"The plan is to build a simple web crawler to fetch website’s data. Then we start a local nrtsearch cluster with a primary and replicas, design its index schema and set up an indexing pipeline for the search engine. Finally, we define nrtsearch queries to support custom scoring and highlighting. A simple search UI will allow us to interact with the system. All of this will be done with minimal coding. I will use open-source libraries to keep things simple and extensible. You can clone \", React.createElement(_components.a, {\n    href: \"https://github.com/jedrazb/nrtsearch-tutorial-website-search\",\n    target: \"_blank\",\n    rel: \"nofollow noopener noreferrer\"\n  }, \"the tutorial code repo\"), \" to run the code locally. All you need is \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">python3</code>\"\n    }\n  }), \" and \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">Docker</code>\"\n    }\n  }), \" installed on your system.\"), \"\\n\", React.createElement(_components.p, null, \"If you want to learn more about nrtsearch, check out Yelp’s Engineering blog post:\"), \"\\n\", React.createElement(_components.blockquote, null, \"\\n\", React.createElement(_components.p, null, React.createElement(_components.a, {\n    href: \"https://engineeringblog.yelp.com/2021/09/nrtsearch-yelps-fast-scalable-and-cost-effective-search-engine.html\",\n    target: \"_blank\",\n    rel: \"nofollow noopener noreferrer\"\n  }, \"Nrtsearch: Yelp’s Fast, Scalable and Cost Effective Search Engine\")), \"\\n\"), \"\\n\", React.createElement(_components.p, null, \"Let’s start!\"), \"\\n\", React.createElement(_components.h2, {\n    id: \"web-crawler\",\n    style: {\n      position: \"relative\"\n    }\n  }, React.createElement(_components.a, {\n    href: \"#web-crawler\",\n    \"aria-label\": \"web crawler permalink\",\n    className: \"anchor before\"\n  }, React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<svg aria-hidden=\\\"true\\\" focusable=\\\"false\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg>\"\n    }\n  })), \"Web crawler\"), \"\\n\", React.createElement(_components.p, null, \"The crawler fetches data from websites. In this tutorial I’m using my blog as an example dataset. For simplicity, I supplied a sitemap - a list of urls - so that the crawler can directly fetch the data.\"), \"\\n\", React.createElement(_components.p, null, \"I use \", React.createElement(_components.a, {\n    href: \"https://beautiful-soup-4.readthedocs.io/en/latest/\",\n    target: \"_blank\",\n    rel: \"nofollow noopener noreferrer\"\n  }, \"beautifulsoup\"), \" library for extracting website content. The website data can be represented in a following way:\"), \"\\n\", React.createElement(_components.ul, null, \"\\n\", React.createElement(_components.li, null, React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">title</code>\"\n    }\n  }), \" - website title tag\"), \"\\n\", React.createElement(_components.li, null, React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">description</code>\"\n    }\n  }), \" - meta description tag, a short summary of the website, provided by the author\"), \"\\n\", React.createElement(_components.li, null, React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">url</code>\"\n    }\n  }), \" - unique website id\"), \"\\n\", React.createElement(_components.li, null, React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">content</code>\"\n    }\n  }), \"- extracted text content, e.g. paragraphs\"), \"\\n\", React.createElement(_components.li, null, React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">headings</code>\"\n    }\n  }), \" - extracted website’s headings, we group \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">h1</code>\"\n    }\n  }), \", \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">h2</code>\"\n    }\n  }), \", \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">h3</code>\"\n    }\n  }), \", … tags together.\"), \"\\n\"), \"\\n\", React.createElement(_components.p, null, \"Our code uses \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">get_source_urls()</code>\"\n    }\n  }), \" function to get the list of urls. The function will process the HTML pages to extract: title, description, content and headings. After it’s done, it will save the output to a JSON file.\"), \"\\n\", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<div class=\\\"gatsby-highlight\\\" data-language=\\\"python\\\"><pre class=\\\"language-python\\\"><code class=\\\"language-python\\\"><span class=\\\"token keyword\\\">import</span> json\\n<span class=\\\"token keyword\\\">import</span> requests\\n<span class=\\\"token keyword\\\">from</span> bs4 <span class=\\\"token keyword\\\">import</span> BeautifulSoup\\n\\nurls <span class=\\\"token operator\\\">=</span> get_source_urls<span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token comment\\\"># urls from website sitemap</span>\\n\\nwebsite_data <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">[</span><span class=\\\"token punctuation\\\">]</span>\\n\\n<span class=\\\"token keyword\\\">for</span> url <span class=\\\"token keyword\\\">in</span> urls<span class=\\\"token punctuation\\\">:</span>\\n    response <span class=\\\"token operator\\\">=</span> requests<span class=\\\"token punctuation\\\">.</span>get<span class=\\\"token punctuation\\\">(</span>url<span class=\\\"token punctuation\\\">)</span>\\n    soup <span class=\\\"token operator\\\">=</span> BeautifulSoup<span class=\\\"token punctuation\\\">(</span>response<span class=\\\"token punctuation\\\">.</span>content<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token string\\\">\\\"html.parser\\\"</span><span class=\\\"token punctuation\\\">)</span>\\n\\n    title <span class=\\\"token operator\\\">=</span> soup<span class=\\\"token punctuation\\\">.</span>title<span class=\\\"token punctuation\\\">.</span>text<span class=\\\"token punctuation\\\">.</span>strip<span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token keyword\\\">if</span> soup<span class=\\\"token punctuation\\\">.</span>title <span class=\\\"token keyword\\\">else</span> <span class=\\\"token boolean\\\">None</span>\\n    description <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">(</span>\\n        soup<span class=\\\"token punctuation\\\">.</span>find<span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">\\\"meta\\\"</span><span class=\\\"token punctuation\\\">,</span> attrs<span class=\\\"token operator\\\">=</span><span class=\\\"token punctuation\\\">{</span><span class=\\\"token string\\\">\\\"name\\\"</span><span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">\\\"description\\\"</span><span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">[</span><span class=\\\"token string\\\">\\\"content\\\"</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">.</span>strip<span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span>\\n        <span class=\\\"token keyword\\\">if</span> soup<span class=\\\"token punctuation\\\">.</span>find<span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">\\\"meta\\\"</span><span class=\\\"token punctuation\\\">,</span> attrs<span class=\\\"token operator\\\">=</span><span class=\\\"token punctuation\\\">{</span><span class=\\\"token string\\\">\\\"name\\\"</span><span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">\\\"description\\\"</span><span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span>\\n        <span class=\\\"token keyword\\\">else</span> <span class=\\\"token boolean\\\">None</span>\\n    <span class=\\\"token punctuation\\\">)</span>\\n    headings <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">[</span>\\n        h<span class=\\\"token punctuation\\\">.</span>text<span class=\\\"token punctuation\\\">.</span>strip<span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token keyword\\\">for</span> h <span class=\\\"token keyword\\\">in</span> soup<span class=\\\"token punctuation\\\">.</span>find_all<span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">[</span><span class=\\\"token string\\\">\\\"h1\\\"</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token string\\\">\\\"h2\\\"</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token string\\\">\\\"h3\\\"</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token string\\\">\\\"h4\\\"</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token string\\\">\\\"h5\\\"</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">)</span>\\n    <span class=\\\"token punctuation\\\">]</span>\\n    content <span class=\\\"token operator\\\">=</span> soup<span class=\\\"token punctuation\\\">.</span>get_text<span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">\\\" \\\"</span><span class=\\\"token punctuation\\\">,</span> strip<span class=\\\"token operator\\\">=</span><span class=\\\"token boolean\\\">True</span><span class=\\\"token punctuation\\\">)</span>\\n\\n    website_data<span class=\\\"token punctuation\\\">.</span>append<span class=\\\"token punctuation\\\">(</span>\\n        <span class=\\\"token punctuation\\\">{</span>\\n            <span class=\\\"token string\\\">\\\"url\\\"</span><span class=\\\"token punctuation\\\">:</span> url<span class=\\\"token punctuation\\\">,</span>\\n            <span class=\\\"token string\\\">\\\"title\\\"</span><span class=\\\"token punctuation\\\">:</span> title<span class=\\\"token punctuation\\\">,</span>\\n            <span class=\\\"token string\\\">\\\"description\\\"</span><span class=\\\"token punctuation\\\">:</span> description<span class=\\\"token punctuation\\\">,</span>\\n            <span class=\\\"token string\\\">\\\"headings\\\"</span><span class=\\\"token punctuation\\\">:</span> headings<span class=\\\"token punctuation\\\">,</span>\\n            <span class=\\\"token string\\\">\\\"content\\\"</span><span class=\\\"token punctuation\\\">:</span> content<span class=\\\"token punctuation\\\">,</span>\\n        <span class=\\\"token punctuation\\\">}</span>\\n    <span class=\\\"token punctuation\\\">)</span>\\n\\n<span class=\\\"token keyword\\\">with</span> <span class=\\\"token builtin\\\">open</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'index_resources/website_data.json'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token string\\\">'w'</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token keyword\\\">as</span> outfile<span class=\\\"token punctuation\\\">:</span>\\n    json<span class=\\\"token punctuation\\\">.</span>dump<span class=\\\"token punctuation\\\">(</span>website_data<span class=\\\"token punctuation\\\">,</span> outfile<span class=\\\"token punctuation\\\">)</span>\\n</code></pre></div>\"\n    }\n  }), \"\\n\", React.createElement(_components.p, null, \"The full crawler code is located in \", React.createElement(_components.a, {\n    href: \"https://github.com/jedrazb/nrtsearch-tutorial-website-search/blob/master/crawler/crawler.py\",\n    target: \"_blank\",\n    rel: \"nofollow noopener noreferrer\"\n  }, \"crawler/crawler.py\"), \", you can run the crawler by executing:\"), \"\\n\", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<div class=\\\"gatsby-highlight\\\" data-language=\\\"bash\\\"><pre class=\\\"language-bash\\\"><code class=\\\"language-bash\\\"><span class=\\\"token function\\\">make</span> run_crawler</code></pre></div>\"\n    }\n  }), \"\\n\", React.createElement(_components.h2, {\n    id: \"nrtsearch-cluster\",\n    style: {\n      position: \"relative\"\n    }\n  }, React.createElement(_components.a, {\n    href: \"#nrtsearch-cluster\",\n    \"aria-label\": \"nrtsearch cluster permalink\",\n    className: \"anchor before\"\n  }, React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<svg aria-hidden=\\\"true\\\" focusable=\\\"false\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg>\"\n    }\n  })), \"Nrtsearch cluster\"), \"\\n\", React.createElement(_components.p, null, \"The nrtsearch cluster consists of 2 types of nodes:\"), \"\\n\", React.createElement(_components.ul, null, \"\\n\", React.createElement(_components.li, null, React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">primary</code>\"\n    }\n  }), \" - a single node, responsible for data indexing. It periodically publishes Lucene segment updates to replicas. Hence the name: \", React.createElement(_components.em, null, \"nrtsearch - near-real time search\"), \".\"), \"\\n\", React.createElement(_components.li, null, React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">replica</code>\"\n    }\n  }), \" - one or more nodes, responsible for serving the search traffic. It receives periodic segment updates from the primary. The number of running replicas can be controlled by an auto-scaler (like \", React.createElement(_components.a, {\n    href: \"https://kubernetes.io/docs/tasks/run-application/horizontal-pod-autoscale/\",\n    target: \"_blank\",\n    rel: \"nofollow noopener noreferrer\"\n  }, \"HPA\"), \") to respond to changing search load.\"), \"\\n\"), \"\\n\", React.createElement(_components.p, null, \"It’s also possible to run the cluster with a single, standalone node, used for both data ingestion and search. It’s ok for experimentation but for production environments it’s recommended to run separate primary and replica nodes.\"), \"\\n\", React.createElement(_components.p, null, \"The source code for nrtsearch cluster setup is available in \", React.createElement(_components.a, {\n    href: \"https://github.com/jedrazb/nrtsearch-tutorial-website-search/tree/master/nrtsearch\",\n    target: \"_blank\",\n    rel: \"nofollow noopener noreferrer\"\n  }, \"/nrtsearch\"), \" folder. There we have:\"), \"\\n\", React.createElement(_components.ul, null, \"\\n\", React.createElement(_components.li, null, React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">Dockerfile</code>\"\n    }\n  }), \" to setup an nrtsearch node\"), \"\\n\", React.createElement(_components.li, null, \"configs for primary and replicas\"), \"\\n\", React.createElement(_components.li, null, React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">docker-compose.yaml</code>\"\n    }\n  }), \" with example cluster configuration\"), \"\\n\"), \"\\n\", React.createElement(_components.p, null, \"Note: in this tutorial we don’t worry about persisting the index state. If you rebuild your nrtsearch containers, all index state will be lost. In order to persist your index, you can attach a permanent volume to docker containers. For production, it’s advisable to use a dedicated s3 bucket where nrtsearch stores the cluster state - it allows deploying nrtsearch as a stateless service. More about possible configurations in \", React.createElement(_components.a, {\n    href: \"https://nrtsearch.readthedocs.io/en/latest/server_configuration.html\",\n    target: \"_blank\",\n    rel: \"nofollow noopener noreferrer\"\n  }, \"nrtsearch docs\"), \".\"), \"\\n\", React.createElement(_components.p, null, \"In order to start the local cluster with a primary and two replicas, run a following command in a separate terminal window:\"), \"\\n\", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<div class=\\\"gatsby-highlight\\\" data-language=\\\"bash\\\"><pre class=\\\"language-bash\\\"><code class=\\\"language-bash\\\"><span class=\\\"token function\\\">make</span> start</code></pre></div>\"\n    }\n  }), \"\\n\", React.createElement(_components.p, null, \"Above command will run \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">docker compose up</code>\"\n    }\n  }), \" that starts the nrtsearch cluster defined in the root \", React.createElement(_components.a, {\n    href: \"https://github.com/jedrazb/nrtsearch-tutorial-website-search/blob/master/docker-compose.yaml\",\n    target: \"_blank\",\n    rel: \"nofollow noopener noreferrer\"\n  }, \"docker-compose.yaml\"), \" file. It will also start a few other services that will be described later. In your terminal window you should see logs indicating that the primary and replicas are ready:\"), \"\\n\", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<div class=\\\"gatsby-highlight\\\" data-language=\\\"bash\\\"><pre class=\\\"language-bash\\\"><code class=\\\"language-bash\\\">primary-node-1        <span class=\\\"token operator\\\">|</span> <span class=\\\"token punctuation\\\">[</span>INFO <span class=\\\"token punctuation\\\">]</span> <span class=\\\"token number\\\">2023</span>-04-16 <span class=\\\"token number\\\">12</span>:12:42.194 <span class=\\\"token punctuation\\\">[</span>main<span class=\\\"token punctuation\\\">]</span> LuceneServer - Server started, listening on <span class=\\\"token number\\\">8000</span> <span class=\\\"token keyword\\\">for</span> messages</code></pre></div>\"\n    }\n  }), \"\\n\", React.createElement(_components.p, null, \"The address of nrtsearch nodes depends on whether you connect to them from the host machine of from a different docker container.\"), \"\\n\", React.createElement(_components.ul, null, \"\\n\", React.createElement(_components.li, null, \"For the host machine, the nrtsearch gRPC server (\", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">8000</code>\"\n    }\n  }), \" container port) of each node in the cluster is exposed on a host’s physical port. We use port \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">8000</code>\"\n    }\n  }), \" for the primary node and ports \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">8001</code>\"\n    }\n  }), \" and \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">8002</code>\"\n    }\n  }), \" for the two replicas.\"), \"\\n\", React.createElement(_components.li, null, \"Within docker containers, we can use docker DNS. \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">primary-node</code>\"\n    }\n  }), \" hostname is used to advertise the primary. All replicas run under the \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">replica-node</code>\"\n    }\n  }), \" hostname. For all nrtsearch nodes the gRPC server runs on port \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">8000</code>\"\n    }\n  }), \".\"), \"\\n\"), \"\\n\", React.createElement(_components.p, null, \"You can run \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">docker compose ps</code>\"\n    }\n  }), \", to see ports assigned to containers.\"), \"\\n\", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<div class=\\\"gatsby-highlight\\\" data-language=\\\"bash\\\"><pre class=\\\"language-bash\\\"><code class=\\\"language-bash\\\">NAME                   IMAGE                COMMAND                  SERVICE              CREATED             STATUS              PORTS\\nprimary-node-1         primary-node         <span class=\\\"token string\\\">\\\"bash -c '/user/nrts…\\\"</span>   primary-node         About an hour ago   Up About an hour    <span class=\\\"token number\\\">0.0</span>.0.0:8000-<span class=\\\"token operator\\\">></span><span class=\\\"token number\\\">8000</span>/tcp\\nreplica-node-1         replica-node         <span class=\\\"token string\\\">\\\"./entrypoint_replic…\\\"</span>   replica-node         About an hour ago   Up About an hour    <span class=\\\"token number\\\">0.0</span>.0.0:8002-<span class=\\\"token operator\\\">></span><span class=\\\"token number\\\">8000</span>/tcp\\nreplica-node-2         replica-node         <span class=\\\"token string\\\">\\\"./entrypoint_replic…\\\"</span>   replica-node         About an hour ago   Up About an hour    <span class=\\\"token number\\\">0.0</span>.0.0:8001-<span class=\\\"token operator\\\">></span><span class=\\\"token number\\\">8000</span>/tcp</code></pre></div>\"\n    }\n  }), \"\\n\", React.createElement(_components.p, null, \"Great! Now we have a local nrtsearch cluster with nodes dedicated to data ingestion and search. Even though the containers are now running, no index was created. A new index must be created via a command. Once the index has been started in replicas, they register with the primary. Replication happens only after documents are ingested into the primary.\"), \"\\n\", React.createElement(_components.p, null, \"Now, let’s prepare the client code to interact with our cluster.\"), \"\\n\", React.createElement(_components.h2, {\n    id: \"generate-grpc-client-code-using-protoc\",\n    style: {\n      position: \"relative\"\n    }\n  }, React.createElement(_components.a, {\n    href: \"#generate-grpc-client-code-using-protoc\",\n    \"aria-label\": \"generate grpc client code using protoc permalink\",\n    className: \"anchor before\"\n  }, React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<svg aria-hidden=\\\"true\\\" focusable=\\\"false\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg>\"\n    }\n  })), \"Generate gRPC client code using protoc\"), \"\\n\", React.createElement(_components.p, null, \"Clients can communicate with nrtsearch via gRPC or REST API. \", React.createElement(_components.a, {\n    href: \"https://grpc.io/\",\n    target: \"_blank\",\n    rel: \"nofollow noopener noreferrer\"\n  }, \"gRPC\"), \" is a high-performance remote procedure call framework that enables communication using protocol buffers. This method yields high performance for production applications. The REST API is an optional way to communicate with nrtsearch, suitable for development and experimentation. The REST server (\", React.createElement(_components.a, {\n    href: \"https://github.com/grpc-ecosystem/grpc-gateway\",\n    target: \"_blank\",\n    rel: \"nofollow noopener noreferrer\"\n  }, \"grpc-gateway\"), \") is autogenerated from \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">proto</code>\"\n    }\n  }), \" definitions.\"), \"\\n\", React.createElement(_components.p, null, \"Let’s use gRPC to communicate with nrtsearch. Since it’s not a REST API we can’t just \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">curl</code>\"\n    }\n  }), \" the endpoints. We need to generate the native client code, \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">python</code>\"\n    }\n  }), \" for this tutorial, to interact with nrtsearch nodes.\"), \"\\n\", React.createElement(_components.p, null, \"To generate Python client code from \", React.createElement(_components.a, {\n    href: \"https://github.com/Yelp/nrtsearch/tree/master/clientlib/src/main/proto/yelp/nrtsearch\",\n    target: \"_blank\",\n    rel: \"nofollow noopener noreferrer\"\n  }, \"nrtsearch proto definitions\"), \", you can use the gRPC toolchain’s \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">protoc</code>\"\n    }\n  }), \" compiler along with the \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">grpc_tools</code>\"\n    }\n  }), \" package to compile the \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">.proto</code>\"\n    }\n  }), \" files into Python code. You can then use the generated client code to communicate with the gRPC server. The steps are:\"), \"\\n\", React.createElement(_components.ul, null, \"\\n\", React.createElement(_components.li, null, \"get all nrtsearch \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">.proto</code>\"\n    }\n  }), \" files along with their dependencies to a folder, let’s call it \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">/protos</code>\"\n    }\n  })), \"\\n\", React.createElement(_components.li, null, \"point \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">protoc</code>\"\n    }\n  }), \" compiler to \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">/protos</code>\"\n    }\n  }), \" folder and generate the python code\"), \"\\n\"), \"\\n\", React.createElement(_components.p, null, \"In the \", React.createElement(_components.a, {\n    href: \"https://github.com/jedrazb/nrtsearch-tutorial-website-search/blob/master/Makefile\",\n    target: \"_blank\",\n    rel: \"nofollow noopener noreferrer\"\n  }, \"Makefile\"), \" there are commands \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">nrtsearch_protos</code>\"\n    }\n  }), \" and \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">nrtsearch_protos</code>\"\n    }\n  }), \" which execute the steps above. They will put the generated code into \", React.createElement(_components.a, {\n    href: \"https://github.com/jedrazb/nrtsearch-tutorial-website-search/tree/master/nrtsearch_client/yelp/nrtsearch\",\n    target: \"_blank\",\n    rel: \"nofollow noopener noreferrer\"\n  }, \"nrtsearch_client/yelp/nrtsearch/\"), \".\"), \"\\n\", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<div class=\\\"gatsby-highlight\\\" data-language=\\\"makefile\\\"><pre class=\\\"language-makefile\\\"><code class=\\\"language-makefile\\\"><span class=\\\"token comment\\\"># Generate nrtsearch .proto files and their dependencies</span>\\n<span class=\\\"token target symbol\\\">nrtsearch_protos</span><span class=\\\"token punctuation\\\">:</span>\\n\\tmkdir -p protos\\n<span class=\\\"token target symbol\\\">\\tdocker build -t nrtsearch-protos-builder</span><span class=\\\"token punctuation\\\">:</span>latest ./utils/nrtsearch_protos_builder/\\n<span class=\\\"token target symbol\\\">\\tdocker run -v <span class=\\\"token variable\\\">$</span>(shell pwd)/protos</span><span class=\\\"token punctuation\\\">:</span>/user/protos  nrtsearch-protos-builder<span class=\\\"token punctuation\\\">:</span>latest\\n\\n<span class=\\\"token comment\\\"># Compile client .proto files to python code</span>\\n<span class=\\\"token target symbol\\\">nrtsearch_protoc</span><span class=\\\"token punctuation\\\">:</span> nrtsearch_protos\\n\\t<span class=\\\"token variable\\\">$</span><span class=\\\"token punctuation\\\">(</span>PYTHON<span class=\\\"token punctuation\\\">)</span> -m grpc_tools.protoc \\\\\\n\\t\\t--proto_path protos \\\\\\n\\t\\t--grpc_python_out nrtsearch_client \\\\\\n\\t\\t--python_out nrtsearch_client \\\\\\n\\t\\tprotos/yelp/nrtsearch/luceneserver.proto \\\\\\n\\t\\tprotos/yelp/nrtsearch/search.proto \\\\\\n\\t\\tprotos/yelp/nrtsearch/analysis.proto \\\\\\n\\t\\tprotos/yelp/nrtsearch/suggest.proto\\n\\trm -rf protos</code></pre></div>\"\n    }\n  }), \"\\n\", React.createElement(_components.p, null, \"In order to nrtsearch \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">.proto</code>\"\n    }\n  }), \" files and their dependencies we use a simple \", React.createElement(_components.a, {\n    href: \"https://github.com/jedrazb/nrtsearch-tutorial-website-search/blob/master/utils/nrtsearch_protos_builder/Dockerfile\",\n    target: \"_blank\",\n    rel: \"nofollow noopener noreferrer\"\n  }, \"Dockerfile\"), \" that compiles the project and moves all proto files into the persistent volume \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">/protos</code>\"\n    }\n  }), \". Then protoc compiler compiles them to python code. After running \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">make nrtsearch_protoc</code>\"\n    }\n  }), \" you can verify that the client code was generated successfully:\"), \"\\n\", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<div class=\\\"gatsby-highlight\\\" data-language=\\\"bash\\\"><pre class=\\\"language-bash\\\"><code class=\\\"language-bash\\\"><span class=\\\"token function\\\">ls</span> nrtsearch_client/yelp/nrtsearch/\\nanalysis_pb2.py          luceneserver_pb2.py      search_pb2.py            suggest_pb2.py\\nanalysis_pb2_grpc.py     luceneserver_pb2_grpc.py search_pb2_grpc.py       suggest_pb2_grpc.py</code></pre></div>\"\n    }\n  }), \"\\n\", React.createElement(_components.h2, {\n    id: \"index-schema\",\n    style: {\n      position: \"relative\"\n    }\n  }, React.createElement(_components.a, {\n    href: \"#index-schema\",\n    \"aria-label\": \"index schema permalink\",\n    className: \"anchor before\"\n  }, React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<svg aria-hidden=\\\"true\\\" focusable=\\\"false\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg>\"\n    }\n  })), \"Index schema\"), \"\\n\", React.createElement(_components.p, null, \"In order to ingest the data into nrtsearch, we must first create an index and register the fields. Appropriate schema design will enable efficient search and results highlighting for blog data.\"), \"\\n\", React.createElement(_components.p, null, \"The \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">blog_search</code>\"\n    }\n  }), \" index needs to represent the data returned from \", React.createElement(_components.a, {\n    href: \"/tech-blog/nrtsearch-tutorial-website-search/#web-crawler\"\n  }, \"the crawler\"), \": url, title, description, headings and text content.\"), \"\\n\", React.createElement(_components.ul, null, \"\\n\", React.createElement(_components.li, null, \"We use \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">TEXT</code>\"\n    }\n  }), \" type for each field, as this allows to the data to be tokenized and indexed with index-time analyzer.\"), \"\\n\", React.createElement(_components.li, null, \"The nested field \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">url.id</code>\"\n    }\n  }), \" has \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">_ID</code>\"\n    }\n  }), \" type - it defines the unique Lucene document id. Note, the \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">url</code>\"\n    }\n  }), \" field has \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">TEXT</code>\"\n    }\n  }), \" type as we still want to search for keywords within the url\"), \"\\n\", React.createElement(_components.li, null, \"Each field is searchable (\", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">search: true</code>\"\n    }\n  }), \"), tokenized (\", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">tokenize: true</code>\"\n    }\n  }), \") and is stored in column-oriented way (\", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">storeDocValues: true</code>\"\n    }\n  }), \").\"), \"\\n\", React.createElement(_components.li, null, \"The \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">content.analyzed</code>\"\n    }\n  }), \" field contains the index-time analyzed webpage content. We define a custom analyzer which removes any html characters (\", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">htmlstrip</code>\"\n    }\n  }), \" charFilter), uses \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">standard</code>\"\n    }\n  }), \" tokenizer and \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">kStem</code>\"\n    }\n  }), \", \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">stop</code>\"\n    }\n  }), \" and \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">lowercase</code>\"\n    }\n  }), \" Lucene token filters. In order to support the \", React.createElement(_components.a, {\n    href: \"https://nrtsearch.readthedocs.io/en/latest/highlighting.html\",\n    target: \"_blank\",\n    rel: \"nofollow noopener noreferrer\"\n  }, \"Fast Vector Highlighter\"), \" for results highlighting, we set \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">termVectors</code>\"\n    }\n  }), \", \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">store</code>\"\n    }\n  }), \" and \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">tokenize</code>\"\n    }\n  }), \" properties.\"), \"\\n\"), \"\\n\", React.createElement(_components.p, null, \"The \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">blog_search</code>\"\n    }\n  }), \" index schema is located in \", React.createElement(_components.a, {\n    href: \"https://github.com/jedrazb/nrtsearch-tutorial-website-search/blob/master/index_resources/index_schema.yaml\",\n    target: \"_blank\",\n    rel: \"nofollow noopener noreferrer\"\n  }, \"index_resources/index_schema.yaml\"), \" and defined as:\"), \"\\n\", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<div class=\\\"gatsby-highlight\\\" data-language=\\\"yaml\\\"><pre class=\\\"language-yaml\\\"><code class=\\\"language-yaml\\\"><span class=\\\"token key atrule\\\">indexName</span><span class=\\\"token punctuation\\\">:</span> blog_search\\n<span class=\\\"token key atrule\\\">field</span><span class=\\\"token punctuation\\\">:</span>\\n  <span class=\\\"token punctuation\\\">-</span> <span class=\\\"token key atrule\\\">name</span><span class=\\\"token punctuation\\\">:</span> url\\n    <span class=\\\"token key atrule\\\">type</span><span class=\\\"token punctuation\\\">:</span> TEXT\\n    <span class=\\\"token key atrule\\\">search</span><span class=\\\"token punctuation\\\">:</span> <span class=\\\"token boolean important\\\">true</span>\\n    <span class=\\\"token key atrule\\\">storeDocValues</span><span class=\\\"token punctuation\\\">:</span> <span class=\\\"token boolean important\\\">true</span>\\n    <span class=\\\"token key atrule\\\">tokenize</span><span class=\\\"token punctuation\\\">:</span> <span class=\\\"token boolean important\\\">true</span>\\n    <span class=\\\"token key atrule\\\">childFields</span><span class=\\\"token punctuation\\\">:</span>\\n      <span class=\\\"token punctuation\\\">-</span> <span class=\\\"token key atrule\\\">name</span><span class=\\\"token punctuation\\\">:</span> id\\n        <span class=\\\"token key atrule\\\">type</span><span class=\\\"token punctuation\\\">:</span> _ID\\n        <span class=\\\"token key atrule\\\">search</span><span class=\\\"token punctuation\\\">:</span> <span class=\\\"token boolean important\\\">true</span>\\n        <span class=\\\"token key atrule\\\">storeDocValues</span><span class=\\\"token punctuation\\\">:</span> <span class=\\\"token boolean important\\\">true</span>\\n  <span class=\\\"token punctuation\\\">-</span> <span class=\\\"token key atrule\\\">name</span><span class=\\\"token punctuation\\\">:</span> title\\n    <span class=\\\"token key atrule\\\">type</span><span class=\\\"token punctuation\\\">:</span> TEXT\\n    <span class=\\\"token key atrule\\\">search</span><span class=\\\"token punctuation\\\">:</span> <span class=\\\"token boolean important\\\">true</span>\\n    <span class=\\\"token key atrule\\\">storeDocValues</span><span class=\\\"token punctuation\\\">:</span> <span class=\\\"token boolean important\\\">true</span>\\n    <span class=\\\"token key atrule\\\">tokenize</span><span class=\\\"token punctuation\\\">:</span> <span class=\\\"token boolean important\\\">true</span>\\n  <span class=\\\"token punctuation\\\">-</span> <span class=\\\"token key atrule\\\">name</span><span class=\\\"token punctuation\\\">:</span> description\\n    <span class=\\\"token key atrule\\\">type</span><span class=\\\"token punctuation\\\">:</span> TEXT\\n    <span class=\\\"token key atrule\\\">search</span><span class=\\\"token punctuation\\\">:</span> <span class=\\\"token boolean important\\\">true</span>\\n    <span class=\\\"token key atrule\\\">storeDocValues</span><span class=\\\"token punctuation\\\">:</span> <span class=\\\"token boolean important\\\">true</span>\\n    <span class=\\\"token key atrule\\\">tokenize</span><span class=\\\"token punctuation\\\">:</span> <span class=\\\"token boolean important\\\">true</span>\\n  <span class=\\\"token punctuation\\\">-</span> <span class=\\\"token key atrule\\\">name</span><span class=\\\"token punctuation\\\">:</span> headings\\n    <span class=\\\"token key atrule\\\">type</span><span class=\\\"token punctuation\\\">:</span> TEXT\\n    <span class=\\\"token key atrule\\\">search</span><span class=\\\"token punctuation\\\">:</span> <span class=\\\"token boolean important\\\">true</span>\\n    <span class=\\\"token key atrule\\\">storeDocValues</span><span class=\\\"token punctuation\\\">:</span> <span class=\\\"token boolean important\\\">true</span>\\n    <span class=\\\"token key atrule\\\">tokenize</span><span class=\\\"token punctuation\\\">:</span> <span class=\\\"token boolean important\\\">true</span>\\n    <span class=\\\"token key atrule\\\">multiValued</span><span class=\\\"token punctuation\\\">:</span> <span class=\\\"token boolean important\\\">true</span>\\n  <span class=\\\"token punctuation\\\">-</span> <span class=\\\"token key atrule\\\">name</span><span class=\\\"token punctuation\\\">:</span> content\\n    <span class=\\\"token key atrule\\\">type</span><span class=\\\"token punctuation\\\">:</span> TEXT\\n    <span class=\\\"token key atrule\\\">search</span><span class=\\\"token punctuation\\\">:</span> <span class=\\\"token boolean important\\\">true</span>\\n    <span class=\\\"token key atrule\\\">storeDocValues</span><span class=\\\"token punctuation\\\">:</span> <span class=\\\"token boolean important\\\">true</span>\\n    <span class=\\\"token key atrule\\\">tokenize</span><span class=\\\"token punctuation\\\">:</span> <span class=\\\"token boolean important\\\">true</span>\\n    <span class=\\\"token key atrule\\\">store</span><span class=\\\"token punctuation\\\">:</span> <span class=\\\"token boolean important\\\">true</span>\\n    <span class=\\\"token key atrule\\\">termVectors</span><span class=\\\"token punctuation\\\">:</span> TERMS_POSITIONS_OFFSETS\\n    <span class=\\\"token key atrule\\\">childFields</span><span class=\\\"token punctuation\\\">:</span>\\n      <span class=\\\"token punctuation\\\">-</span> <span class=\\\"token key atrule\\\">name</span><span class=\\\"token punctuation\\\">:</span> analyzed\\n        <span class=\\\"token key atrule\\\">type</span><span class=\\\"token punctuation\\\">:</span> TEXT\\n        <span class=\\\"token key atrule\\\">search</span><span class=\\\"token punctuation\\\">:</span> <span class=\\\"token boolean important\\\">true</span>\\n        <span class=\\\"token key atrule\\\">store</span><span class=\\\"token punctuation\\\">:</span> <span class=\\\"token boolean important\\\">true</span>\\n        <span class=\\\"token key atrule\\\">termVectors</span><span class=\\\"token punctuation\\\">:</span> TERMS_POSITIONS_OFFSETS\\n        <span class=\\\"token key atrule\\\">tokenize</span><span class=\\\"token punctuation\\\">:</span> <span class=\\\"token boolean important\\\">true</span>\\n        <span class=\\\"token key atrule\\\">analyzer</span><span class=\\\"token punctuation\\\">:</span>\\n          <span class=\\\"token key atrule\\\">custom</span><span class=\\\"token punctuation\\\">:</span>\\n            <span class=\\\"token key atrule\\\">charFilters</span><span class=\\\"token punctuation\\\">:</span>\\n              <span class=\\\"token punctuation\\\">-</span> <span class=\\\"token key atrule\\\">name</span><span class=\\\"token punctuation\\\">:</span> htmlstrip\\n            <span class=\\\"token key atrule\\\">tokenizer</span><span class=\\\"token punctuation\\\">:</span>\\n              <span class=\\\"token key atrule\\\">name</span><span class=\\\"token punctuation\\\">:</span> standard\\n            <span class=\\\"token key atrule\\\">tokenFilters</span><span class=\\\"token punctuation\\\">:</span>\\n              <span class=\\\"token punctuation\\\">-</span> <span class=\\\"token key atrule\\\">name</span><span class=\\\"token punctuation\\\">:</span> lowercase\\n              <span class=\\\"token punctuation\\\">-</span> <span class=\\\"token key atrule\\\">name</span><span class=\\\"token punctuation\\\">:</span> kStem\\n              <span class=\\\"token punctuation\\\">-</span> <span class=\\\"token key atrule\\\">name</span><span class=\\\"token punctuation\\\">:</span> stop</code></pre></div>\"\n    }\n  }), \"\\n\", React.createElement(_components.p, null, \"More information about the nrtsearch field types, schema design and supported analyzers is available in the \", React.createElement(_components.a, {\n    href: \"https://nrtsearch.readthedocs.io/en/latest/analysis.html\",\n    target: \"_blank\",\n    rel: \"nofollow noopener noreferrer\"\n  }, \"nrtsearch docs\"), \".\"), \"\\n\", React.createElement(_components.h2, {\n    id: \"create-nrtsearch-index\",\n    style: {\n      position: \"relative\"\n    }\n  }, React.createElement(_components.a, {\n    href: \"#create-nrtsearch-index\",\n    \"aria-label\": \"create nrtsearch index permalink\",\n    className: \"anchor before\"\n  }, React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<svg aria-hidden=\\\"true\\\" focusable=\\\"false\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg>\"\n    }\n  })), \"Create nrtsearch index\"), \"\\n\", React.createElement(_components.p, null, \"Now it’s time to create and start an index for blog data. We have a running nrtsearch cluster, generated client code and the index schema.\"), \"\\n\", React.createElement(_components.p, null, \"To configure the index on primary and replicas, we need to run several requests in order.\"), \"\\n\", React.createElement(_components.ol, null, \"\\n\", React.createElement(_components.li, null, React.createElement(_components.a, {\n    href: \"https://github.com/Yelp/nrtsearch/blob/master/clientlib/src/main/proto/yelp/nrtsearch/luceneserver.proto#L428\",\n    target: \"_blank\",\n    rel: \"nofollow noopener noreferrer\"\n  }, \"CreateIndexRequest\"), \" - creates the nrtsearch index with a given name\"), \"\\n\", React.createElement(_components.li, null, React.createElement(_components.a, {\n    href: \"https://github.com/Yelp/nrtsearch/blob/master/clientlib/src/main/proto/yelp/nrtsearch/luceneserver.proto#L594\",\n    target: \"_blank\",\n    rel: \"nofollow noopener noreferrer\"\n  }, \"SettingsRequest\"), \" - sets Lucene-related index settings\"), \"\\n\", React.createElement(_components.li, null, React.createElement(_components.a, {\n    href: \"https://github.com/Yelp/nrtsearch/blob/master/clientlib/src/main/proto/yelp/nrtsearch/luceneserver.proto#L628\",\n    target: \"_blank\",\n    rel: \"nofollow noopener noreferrer\"\n  }, \"StartIndexRequest\"), \" - starts the index in a given mode (\", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">STANDALONE</code>\"\n    }\n  }), \", \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">PRIMARY</code>\"\n    }\n  }), \" or \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">REPLICA</code>\"\n    }\n  }), \"), additionally for replicas we need to specify primary \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">host:port</code>\"\n    }\n  }), \" for index replication\"), \"\\n\", React.createElement(_components.li, null, React.createElement(_components.a, {\n    href: \"https://github.com/Yelp/nrtsearch/blob/master/clientlib/src/main/proto/yelp/nrtsearch/luceneserver.proto#L583\",\n    target: \"_blank\",\n    rel: \"nofollow noopener noreferrer\"\n  }, \"FieldDefRequest\"), \" - registers index schema\"), \"\\n\", React.createElement(_components.li, null, React.createElement(_components.a, {\n    href: \"https://github.com/Yelp/nrtsearch/blob/master/clientlib/src/main/proto/yelp/nrtsearch/luceneserver.proto#L687\",\n    target: \"_blank\",\n    rel: \"nofollow noopener noreferrer\"\n  }, \"CommitRequest\"), \" - commits the newly created index. It ensures its state is preserved in s3 or other persistent storage\"), \"\\n\"), \"\\n\", React.createElement(_components.p, null, \"Each docker compose container has assigned a fixed \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">host:port</code>\"\n    }\n  }), \" (see \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">docker-compose.yaml</code>\"\n    }\n  }), \") so I’m using dummy service discovery to discover and communicate with nrtsearch nodes from the host machine:\"), \"\\n\", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<div class=\\\"gatsby-highlight\\\" data-language=\\\"python\\\"><pre class=\\\"language-python\\\"><code class=\\\"language-python\\\"><span class=\\\"token comment\\\"># Simple service discovery for scripts ran from host machine</span>\\nSERVICE_DISCOVERY <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token string\\\">\\\"primary-node\\\"</span><span class=\\\"token punctuation\\\">:</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">\\\"localhost\\\"</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">8000</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">,</span>\\n    <span class=\\\"token string\\\">\\\"replica-node-0\\\"</span><span class=\\\"token punctuation\\\">:</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">\\\"localhost\\\"</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">8001</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">,</span>\\n    <span class=\\\"token string\\\">\\\"replica-node-1\\\"</span><span class=\\\"token punctuation\\\">:</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">\\\"localhost\\\"</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">8002</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">,</span>\\n<span class=\\\"token punctuation\\\">}</span></code></pre></div>\"\n    }\n  }), \"\\n\", React.createElement(_components.p, null, \"In \", React.createElement(_components.a, {\n    href: \"https://github.com/jedrazb/nrtsearch-tutorial-website-search/blob/master/nrtsearch_client/client.py\",\n    target: \"_blank\",\n    rel: \"nofollow noopener noreferrer\"\n  }, \"nrtsearch_client/client.py\"), \" we have the gRPC client which communicates with our cluster nodes:\"), \"\\n\", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<div class=\\\"gatsby-highlight\\\" data-language=\\\"python\\\"><pre class=\\\"language-python\\\"><code class=\\\"language-python\\\"><span class=\\\"token decorator annotation punctuation\\\">@lru_cache</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">3</span><span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token keyword\\\">def</span> <span class=\\\"token function\\\">get_nrtsearch_client</span><span class=\\\"token punctuation\\\">(</span>host<span class=\\\"token punctuation\\\">,</span> port<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">:</span>\\n    channel <span class=\\\"token operator\\\">=</span> grpc<span class=\\\"token punctuation\\\">.</span>insecure_channel<span class=\\\"token punctuation\\\">(</span><span class=\\\"token string-interpolation\\\"><span class=\\\"token string\\\">f\\\"</span><span class=\\\"token interpolation\\\"><span class=\\\"token punctuation\\\">{</span>host<span class=\\\"token punctuation\\\">}</span></span><span class=\\\"token string\\\">:</span><span class=\\\"token interpolation\\\"><span class=\\\"token punctuation\\\">{</span>port<span class=\\\"token punctuation\\\">}</span></span><span class=\\\"token string\\\">\\\"</span></span><span class=\\\"token punctuation\\\">)</span>\\n    <span class=\\\"token keyword\\\">return</span> LuceneServerStub<span class=\\\"token punctuation\\\">(</span>channel<span class=\\\"token punctuation\\\">)</span></code></pre></div>\"\n    }\n  }), \"\\n\", React.createElement(_components.p, null, \"The script in \", React.createElement(_components.a, {\n    href: \"https://github.com/jedrazb/nrtsearch-tutorial-website-search/blob/master/nrtsearch_client/setup_index.py\",\n    target: \"_blank\",\n    rel: \"nofollow noopener noreferrer\"\n  }, \"nrtsearch_client/setup_index.py\"), \" creates clients for each node and executes the above commands in order, using the protobuf generated code. You can run the script for index setup locally via \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">make setup_index</code>\"\n    }\n  }), \".\"), \"\\n\", React.createElement(_components.p, null, \"The process of starting the index is slightly different for replicas and primaries. For example, the \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">start_index_replica()</code>\"\n    }\n  }), \" starts the index in \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">REPLICA</code>\"\n    }\n  }), \" mode and registers to primary to listen for index updates. The \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">primaryAddress=\\\"primary-node\\\"</code>\"\n    }\n  }), \" is defined in \", React.createElement(_components.a, {\n    href: \"https://github.com/jedrazb/nrtsearch-tutorial-website-search/blob/master/docker-compose.yaml#L9\",\n    target: \"_blank\",\n    rel: \"nofollow noopener noreferrer\"\n  }, \"docker-compose.yaml\"), \" and the \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">8001</code>\"\n    }\n  }), \" replication port comes from the primary \", React.createElement(_components.a, {\n    href: \"https://github.com/jedrazb/nrtsearch-tutorial-website-search/blob/master/nrtsearch/nrtsearch-primary-config.yaml#L4\",\n    target: \"_blank\",\n    rel: \"nofollow noopener noreferrer\"\n  }, \"server configuration\"), \". Note that replicas use the internal Docker network to communicate with the primary so we don’t need to expose the replication port.\"), \"\\n\", React.createElement(_components.p, null, \"You can verify that the \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">blog_search</code>\"\n    }\n  }), \" index is created on each node by running \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">make index_status</code>\"\n    }\n  }), \". The output should look like:\"), \"\\n\", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<div class=\\\"gatsby-highlight\\\" data-language=\\\"bash\\\"><pre class=\\\"language-bash\\\"><code class=\\\"language-bash\\\">IndicesRequest for: primary-node\\nindicesResponse <span class=\\\"token punctuation\\\">{</span>\\n  indexName: <span class=\\\"token string\\\">\\\"blog_search\\\"</span>\\n  statsResponse <span class=\\\"token punctuation\\\">{</span>\\n    dirSize: <span class=\\\"token number\\\">96</span>\\n    state: <span class=\\\"token string\\\">\\\"started\\\"</span>\\n    taxonomy <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n    currentSearcher <span class=\\\"token punctuation\\\">{</span>\\n      segments: <span class=\\\"token string\\\">\\\"IndexSearcher(StandardDirectoryReader(segments_1:2:nrt); executor=ExecutorWithParams(sli\\nceMaxDocs=250000, sliceMaxSegments=5, virtualShards=1, wrapped=java.util.concurrent.ThreadPoolExecutor@4a\\nbd0a9d[Running, pool size = 0, active threads = 0, queued tasks = 0, completed tasks = 0]))\\\"</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\nIndicesRequest for: replica-node-0\\nindicesResponse <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token comment\\\">#...</span>\\n<span class=\\\"token punctuation\\\">}</span></code></pre></div>\"\n    }\n  }), \"\\n\", React.createElement(_components.p, null, \"If you restart the nrtsearch container, you will see that even though the state files are still present in the volume, the index won’t be started. Nrtsearch expects a \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">startIndex</code>\"\n    }\n  }), \" command after server restart. In the \", React.createElement(_components.a, {\n    href: \"https://github.com/jedrazb/nrtsearch-tutorial-website-search/blob/master/nrtsearch_client/setup_index.py\",\n    target: \"_blank\",\n    rel: \"nofollow noopener noreferrer\"\n  }, \"nrtsearch_client/setup_index.py\"), \" script we have extra logic to handle following scenarios:\"), \"\\n\", React.createElement(_components.ul, null, \"\\n\", React.createElement(_components.li, null, React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">blog_search</code>\"\n    }\n  }), \" index is not returned from the \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">indices()</code>\"\n    }\n  }), \" call. It means that the index doesn’t exist. We need to execute all 5 steps to create an index.\"), \"\\n\", React.createElement(_components.li, null, React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">blog_search</code>\"\n    }\n  }), \" index exists but is \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">not_started</code>\"\n    }\n  }), \". This can happen when you restart a Docker container. We need to just issue the \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">StartIndexRequest</code>\"\n    }\n  }), \".\"), \"\\n\", React.createElement(_components.li, null, React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">blog_search</code>\"\n    }\n  }), \" index exists and it is \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">started</code>\"\n    }\n  }), \" - all good, index is already running.\"), \"\\n\"), \"\\n\", React.createElement(_components.p, null, \"Great! Now we have a running nrtsearch cluster and our index is started and replicated between primary and replicas. Let’s move on to data ingestion.\"), \"\\n\", React.createElement(_components.h2, {\n    id: \"nrtsearch-indexer\",\n    style: {\n      position: \"relative\"\n    }\n  }, React.createElement(_components.a, {\n    href: \"#nrtsearch-indexer\",\n    \"aria-label\": \"nrtsearch indexer permalink\",\n    className: \"anchor before\"\n  }, React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<svg aria-hidden=\\\"true\\\" focusable=\\\"false\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg>\"\n    }\n  })), \"Nrtsearch indexer\"), \"\\n\", React.createElement(_components.p, null, \"In order to ingest data into nrtsearch we can use the \", React.createElement(_components.a, {\n    href: \"https://github.com/Yelp/nrtsearch/blob/master/clientlib/src/main/proto/yelp/nrtsearch/luceneserver.proto#L135\",\n    target: \"_blank\",\n    rel: \"nofollow noopener noreferrer\"\n  }, \"addDocuments\"), \" client method. It allows streaming multiple \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">AddDocumentRequest</code>\"\n    }\n  }), \" to the primary for indexing.\"), \"\\n\", React.createElement(_components.p, null, \"A single call to \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">addDocuments</code>\"\n    }\n  }), \" can contain multiple documents in the payload. You can call it a bulk update. It’s more efficient when indexing a large amounts of documents. Therefore, it’s advisable to batch your documents and ingest them in bulk for production use-cases.\"), \"\\n\", React.createElement(_components.blockquote, null, \"\\n\", React.createElement(_components.p, null, \"There is no transaction log, so you must call commit periodically to make recent changes durable on disk. This means that if a node crashes, all indexed documents since the last commit are lost. (\", React.createElement(_components.a, {\n    href: \"https://nrtsearch.readthedocs.io/en/latest/introduction.html#design\",\n    target: \"_blank\",\n    rel: \"nofollow noopener noreferrer\"\n  }, \"docs\"), \")\"), \"\\n\"), \"\\n\", React.createElement(_components.p, null, \"When ingesting our data to nrtsearch we need to call \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">commit</code>\"\n    }\n  }), \" periodically to ensure our data is persisted. It works very well with streaming frameworks, like Flink, where you can call \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">commit</code>\"\n    }\n  }), \" every time your Flink application checkpoints. The checkpoint is successful if and only if the commit call succeeds.\"), \"\\n\", React.createElement(_components.p, null, \"I use a python script, which batches docs and ingests them into the primary and commits the index. Then, we can inspect the replica state to check if index segments were replicated.\"), \"\\n\", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<div class=\\\"gatsby-highlight\\\" data-language=\\\"python\\\"><pre class=\\\"language-python\\\"><code class=\\\"language-python\\\"><span class=\\\"token comment\\\"># For prod cases we can even make it 1000, taking small value for this tutorial</span>\\nBATCH_SIZE <span class=\\\"token operator\\\">=</span> <span class=\\\"token number\\\">10</span>\\n\\n\\n<span class=\\\"token comment\\\"># Load the data processed and saved by the crawler</span>\\n<span class=\\\"token keyword\\\">def</span> <span class=\\\"token function\\\">_load_website_data</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">:</span>\\n    <span class=\\\"token keyword\\\">with</span> <span class=\\\"token builtin\\\">open</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">\\\"index_resources/website_data.json\\\"</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token keyword\\\">as</span> f<span class=\\\"token punctuation\\\">:</span>\\n        data <span class=\\\"token operator\\\">=</span> json<span class=\\\"token punctuation\\\">.</span>load<span class=\\\"token punctuation\\\">(</span>f<span class=\\\"token punctuation\\\">)</span>\\n\\n    <span class=\\\"token keyword\\\">return</span> data\\n\\n\\n<span class=\\\"token comment\\\"># Prepare the request payload</span>\\n<span class=\\\"token keyword\\\">def</span> <span class=\\\"token function\\\">_prepare_document_stream</span><span class=\\\"token punctuation\\\">(</span>docs<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">:</span>\\n    <span class=\\\"token keyword\\\">for</span> doc <span class=\\\"token keyword\\\">in</span> docs<span class=\\\"token punctuation\\\">:</span>\\n        fields <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">{</span>\\n            <span class=\\\"token string\\\">\\\"url\\\"</span><span class=\\\"token punctuation\\\">:</span> AddDocumentRequest<span class=\\\"token punctuation\\\">.</span>MultiValuedField<span class=\\\"token punctuation\\\">(</span>value<span class=\\\"token operator\\\">=</span><span class=\\\"token punctuation\\\">[</span>doc<span class=\\\"token punctuation\\\">[</span><span class=\\\"token string\\\">\\\"url\\\"</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">,</span>\\n            <span class=\\\"token string\\\">\\\"title\\\"</span><span class=\\\"token punctuation\\\">:</span> AddDocumentRequest<span class=\\\"token punctuation\\\">.</span>MultiValuedField<span class=\\\"token punctuation\\\">(</span>value<span class=\\\"token operator\\\">=</span><span class=\\\"token punctuation\\\">[</span>doc<span class=\\\"token punctuation\\\">[</span><span class=\\\"token string\\\">\\\"title\\\"</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">,</span>\\n            <span class=\\\"token string\\\">\\\"description\\\"</span><span class=\\\"token punctuation\\\">:</span> AddDocumentRequest<span class=\\\"token punctuation\\\">.</span>MultiValuedField<span class=\\\"token punctuation\\\">(</span>\\n                value<span class=\\\"token operator\\\">=</span><span class=\\\"token punctuation\\\">[</span>doc<span class=\\\"token punctuation\\\">[</span><span class=\\\"token string\\\">\\\"description\\\"</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">]</span>\\n            <span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">,</span>\\n            <span class=\\\"token string\\\">\\\"headings\\\"</span><span class=\\\"token punctuation\\\">:</span> AddDocumentRequest<span class=\\\"token punctuation\\\">.</span>MultiValuedField<span class=\\\"token punctuation\\\">(</span>value<span class=\\\"token operator\\\">=</span>doc<span class=\\\"token punctuation\\\">[</span><span class=\\\"token string\\\">\\\"headings\\\"</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">,</span>\\n            <span class=\\\"token string\\\">\\\"content\\\"</span><span class=\\\"token punctuation\\\">:</span> AddDocumentRequest<span class=\\\"token punctuation\\\">.</span>MultiValuedField<span class=\\\"token punctuation\\\">(</span>value<span class=\\\"token operator\\\">=</span><span class=\\\"token punctuation\\\">[</span>doc<span class=\\\"token punctuation\\\">[</span><span class=\\\"token string\\\">\\\"content\\\"</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">,</span>\\n        <span class=\\\"token punctuation\\\">}</span>\\n\\n        <span class=\\\"token keyword\\\">yield</span> AddDocumentRequest<span class=\\\"token punctuation\\\">(</span>indexName<span class=\\\"token operator\\\">=</span>INDEX_NAME<span class=\\\"token punctuation\\\">,</span> fields<span class=\\\"token operator\\\">=</span>fields<span class=\\\"token punctuation\\\">)</span>\\n\\n\\n<span class=\\\"token comment\\\"># Use gRPC streaming to send documents for ingestion</span>\\n<span class=\\\"token keyword\\\">def</span> <span class=\\\"token function\\\">index_document_stream</span><span class=\\\"token punctuation\\\">(</span>primary_client<span class=\\\"token punctuation\\\">,</span> doc_stream<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">:</span>\\n    response <span class=\\\"token operator\\\">=</span> primary_client<span class=\\\"token punctuation\\\">.</span>addDocuments<span class=\\\"token punctuation\\\">(</span>doc_stream<span class=\\\"token punctuation\\\">)</span>\\n    <span class=\\\"token keyword\\\">return</span> response\\n\\n\\n<span class=\\\"token keyword\\\">def</span> <span class=\\\"token function\\\">run_indexer</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">:</span>\\n    <span class=\\\"token comment\\\"># Just index data to primary - data will be replicated to other nodes in the cluster</span>\\n    host<span class=\\\"token punctuation\\\">,</span> port <span class=\\\"token operator\\\">=</span> SERVICE_DISCOVERY<span class=\\\"token punctuation\\\">.</span>get<span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">\\\"primary-node\\\"</span><span class=\\\"token punctuation\\\">)</span>\\n    primary_client <span class=\\\"token operator\\\">=</span> get_nrtsearch_client<span class=\\\"token punctuation\\\">(</span>host<span class=\\\"token punctuation\\\">,</span> port<span class=\\\"token punctuation\\\">)</span>\\n\\n    website_docs <span class=\\\"token operator\\\">=</span> _load_website_data<span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span>\\n\\n    <span class=\\\"token comment\\\"># Split data into chunks for bulk ingestion</span>\\n    chunked_website_docs <span class=\\\"token operator\\\">=</span> chunked<span class=\\\"token punctuation\\\">(</span>website_docs<span class=\\\"token punctuation\\\">,</span> BATCH_SIZE<span class=\\\"token punctuation\\\">)</span>\\n\\n    <span class=\\\"token comment\\\"># Process each chunk of docs in bulk</span>\\n    <span class=\\\"token keyword\\\">for</span> idx<span class=\\\"token punctuation\\\">,</span> docs_chunk <span class=\\\"token keyword\\\">in</span> <span class=\\\"token builtin\\\">enumerate</span><span class=\\\"token punctuation\\\">(</span>chunked_website_docs<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">:</span>\\n        doc_stream <span class=\\\"token operator\\\">=</span> _prepare_document_stream<span class=\\\"token punctuation\\\">(</span>docs<span class=\\\"token operator\\\">=</span>docs_chunk<span class=\\\"token punctuation\\\">)</span>\\n        index_response <span class=\\\"token operator\\\">=</span> index_document_stream<span class=\\\"token punctuation\\\">(</span>primary_client<span class=\\\"token punctuation\\\">,</span> doc_stream<span class=\\\"token punctuation\\\">)</span>\\n\\n    <span class=\\\"token comment\\\"># Call commit after docs are ingested</span>\\n    commit_response <span class=\\\"token operator\\\">=</span> commit_index<span class=\\\"token punctuation\\\">(</span>primary_client<span class=\\\"token punctuation\\\">)</span></code></pre></div>\"\n    }\n  }), \"\\n\", React.createElement(_components.p, null, \"You can start the script by running \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">make run_indexer</code>\"\n    }\n  }), \". After the script is done, let’s check the number of docs in each nrtsearch node - to verify that updates were propagated to replicas.\"), \"\\n\", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<div class=\\\"gatsby-highlight\\\" data-language=\\\"bash\\\"><pre class=\\\"language-bash\\\"><code class=\\\"language-bash\\\"><span class=\\\"token operator\\\">></span> venv/bin/python nrtsearch_client/get_indices.py\\nIndicesRequest for: primary-node\\nindicesResponse <span class=\\\"token punctuation\\\">{</span>\\n  indexName: <span class=\\\"token string\\\">\\\"blog_search\\\"</span>\\n  statsResponse <span class=\\\"token punctuation\\\">{</span>\\n    maxDoc: <span class=\\\"token number\\\">21</span>\\n    numDocs: <span class=\\\"token number\\\">21</span>\\n    <span class=\\\"token punctuation\\\">..</span>.\\n    currentSearcher <span class=\\\"token punctuation\\\">{</span>\\n      numDocs: <span class=\\\"token number\\\">21</span>\\n      <span class=\\\"token punctuation\\\">..</span>.\\n    <span class=\\\"token punctuation\\\">}</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">..</span>.\\nIndicesRequest for: replica-node-1\\nindicesResponse <span class=\\\"token punctuation\\\">{</span>\\n  indexName: <span class=\\\"token string\\\">\\\"blog_search\\\"</span>\\n  statsResponse <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token punctuation\\\">..</span>.\\n    <span class=\\\"token punctuation\\\">}</span>\\n    searchers <span class=\\\"token punctuation\\\">{</span>\\n      numDocs: <span class=\\\"token number\\\">21</span>\\n      <span class=\\\"token punctuation\\\">..</span>.\\n    <span class=\\\"token punctuation\\\">}</span>\\n    <span class=\\\"token punctuation\\\">..</span>.\\n  <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span></code></pre></div>\"\n    }\n  }), \"\\n\", React.createElement(_components.p, null, \"We can see that data was successfully replicated between primary and replica nodes - both report 21 docs in their index. Great! 🎉\"), \"\\n\", React.createElement(_components.h2, {\n    id: \"grpcox-web-ui\",\n    style: {\n      position: \"relative\"\n    }\n  }, React.createElement(_components.a, {\n    href: \"#grpcox-web-ui\",\n    \"aria-label\": \"grpcox web ui permalink\",\n    className: \"anchor before\"\n  }, React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<svg aria-hidden=\\\"true\\\" focusable=\\\"false\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg>\"\n    }\n  })), \"gRPCox web UI\"), \"\\n\", React.createElement(_components.p, null, React.createElement(_components.a, {\n    href: \"https://github.com/gusaul/grpcox\",\n    target: \"_blank\",\n    rel: \"nofollow noopener noreferrer\"\n  }, \"gRPCox\"), \" is a web UI wrapper for \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">gRPCurl</code>\"\n    }\n  }), \". It’s a simple but useful tool that lets you interact with gRPC servers. It’s optional for the tutorial but I want to show how it enables ad-hoc communication with the nrtsearch server.\"), \"\\n\", React.createElement(_components.p, null, \"The UI was started as one of the services invoked by the \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">make start</code>\"\n    }\n  }), \" command and is accessible on \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">localhost:6969</code>\"\n    }\n  }), \". The primary is advertised under \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">primary-node</code>\"\n    }\n  }), \" hostname, and replicas are advertised under \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">replica-node</code>\"\n    }\n  }), \" (you can inspect logs to find IP of each replica). The nrtsearch gRPC server runs on port \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">8000</code>\"\n    }\n  }), \".\"), \"\\n\", React.createElement(_components.p, null, \"Let’s connect to the primary node and run a simple search request to explore the index.\"), \"\\n\", React.createElement(_components.ul, null, \"\\n\", React.createElement(_components.li, null, \"Connect to primary at \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">primary-node:8000</code>\"\n    }\n  })), \"\\n\", React.createElement(_components.li, null, \"Select \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">luceneserver.LuceneServer</code>\"\n    }\n  }), \" service. You should then see all available gRPC methods and their schemas.\"), \"\\n\"), \"\\n\", React.createElement(_components.p, null, \"We will use \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">search</code>\"\n    }\n  }), \" and pass this query to explore docs in the index (note, since the \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">query</code>\"\n    }\n  }), \" field is empty it will return all documents).\"), \"\\n\", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<div class=\\\"gatsby-highlight\\\" data-language=\\\"json\\\"><pre class=\\\"language-json\\\"><code class=\\\"language-json\\\"><span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token property\\\">\\\"indexName\\\"</span><span class=\\\"token operator\\\">:</span> <span class=\\\"token string\\\">\\\"blog_search\\\"</span><span class=\\\"token punctuation\\\">,</span>\\n  <span class=\\\"token property\\\">\\\"startHit\\\"</span><span class=\\\"token operator\\\">:</span> <span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">,</span>\\n  <span class=\\\"token property\\\">\\\"topHits\\\"</span><span class=\\\"token operator\\\">:</span> <span class=\\\"token number\\\">100</span><span class=\\\"token punctuation\\\">,</span>\\n  <span class=\\\"token property\\\">\\\"retrieveFields\\\"</span><span class=\\\"token operator\\\">:</span> <span class=\\\"token punctuation\\\">[</span><span class=\\\"token string\\\">\\\"title\\\"</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token string\\\">\\\"description\\\"</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token string\\\">\\\"url\\\"</span><span class=\\\"token punctuation\\\">]</span>\\n<span class=\\\"token punctuation\\\">}</span></code></pre></div>\"\n    }\n  }), \"\\n\", React.createElement(_components.p, null, \"You should see the search results in the UI.\"), \"\\n\", React.createElement(ImageComponent, {\n    image: props.data.mdx.frontmatter.blogImages[1],\n    alt: \"gRPCox\"\n  }), \"\\n\", React.createElement(_components.h2, {\n    id: \"custom-search-ranking\",\n    style: {\n      position: \"relative\"\n    }\n  }, React.createElement(_components.a, {\n    href: \"#custom-search-ranking\",\n    \"aria-label\": \"custom search ranking permalink\",\n    className: \"anchor before\"\n  }, React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<svg aria-hidden=\\\"true\\\" focusable=\\\"false\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg>\"\n    }\n  })), \"Custom search ranking\"), \"\\n\", React.createElement(_components.p, null, \"The Lucene’s scoring algorithm considers the frequency and distribution of terms in the document and query vectors. For our scenario it should suffice to return documents that match the user search query. We can add custom weights to prioritize results that contain the search term inside \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">title</code>\"\n    }\n  }), \", \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">description</code>\"\n    }\n  }), \", \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">headings</code>\"\n    }\n  }), \", \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">url</code>\"\n    }\n  }), \" and \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">content</code>\"\n    }\n  }), \". We can start with simple weights, test our system and refine the algorithm as necessary to improve search results.\"), \"\\n\", React.createElement(_components.p, null, React.createElement(_components.a, {\n    href: \"https://nrtsearch.readthedocs.io/en/latest/querying_nrtsearch.html\",\n    target: \"_blank\",\n    rel: \"nofollow noopener noreferrer\"\n  }, \"Building Nrtsearch Queries\"), \" documentation page contains supported query types along with examples and explanations. Since nrtsearch is based on Apache Lucene, its query types map closely to Lucene queries. It’s possible to customize queries for each field based on specific search requirements. You can combine the queries using a \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">BooleanQuery</code>\"\n    }\n  }), \" with multiple clauses. For example, you could use a \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">MatchPhraseQuery</code>\"\n    }\n  }), \" to search for exact phrases, or a add fuzziness parameters to \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">MatchQuery</code>\"\n    }\n  }), \" to search for approximate matches.\"), \"\\n\", React.createElement(_components.p, null, \"The search query used for retrieving hits from \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">blog_search</code>\"\n    }\n  }), \" index is defined in \", React.createElement(_components.a, {\n    href: \"https://github.com/jedrazb/nrtsearch-tutorial-website-search/blob/master/nrtsearch_client/searcher.py#L41\",\n    target: \"_blank\",\n    rel: \"nofollow noopener noreferrer\"\n  }, \"nrtsearch_client/searcher.py\"), \". We combine multiple \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">MatchQuery</code>\"\n    }\n  }), \" and \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">MatchPhraseQuery</code>\"\n    }\n  }), \" queries to recall and score documents based on their title, description, headings, url and content.\"), \"\\n\", React.createElement(_components.h2, {\n    id: \"highlighting-support\",\n    style: {\n      position: \"relative\"\n    }\n  }, React.createElement(_components.a, {\n    href: \"#highlighting-support\",\n    \"aria-label\": \"highlighting support permalink\",\n    className: \"anchor before\"\n  }, React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<svg aria-hidden=\\\"true\\\" focusable=\\\"false\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg>\"\n    }\n  })), \"Highlighting support\"), \"\\n\", React.createElement(_components.p, null, \"Highlights are used to retrieve information about matched terms in a hit. Nrtsearch currently supports the \", React.createElement(_components.a, {\n    href: \"https://github.com/apache/lucene/blob/main/lucene/highlighter/src/java/org/apache/lucene/search/vectorhighlight/FastVectorHighlighter.java\",\n    target: \"_blank\",\n    rel: \"nofollow noopener noreferrer\"\n  }, \"Fast Vector Highlighter\"), \" in Lucene.\"), \"\\n\", React.createElement(_components.p, null, \"Results highlighting is configured in the search request’s \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">highlight</code>\"\n    }\n  }), \" field. Nrtsearch returns matched terms in a hit wrapped in \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">pre_tags</code>\"\n    }\n  }), \" and \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">post_tags</code>\"\n    }\n  }), \". In this tutorial I use the \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">&lt;em></code>\"\n    }\n  }), \" html tag to emphasize the highlighted content.\"), \"\\n\", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<div class=\\\"gatsby-highlight\\\" data-language=\\\"python\\\"><pre class=\\\"language-python\\\"><code class=\\\"language-python\\\">search_request <span class=\\\"token operator\\\">=</span> SearchRequest<span class=\\\"token punctuation\\\">(</span>\\n    indexName<span class=\\\"token operator\\\">=</span><span class=\\\"token string\\\">'blog_search'</span><span class=\\\"token punctuation\\\">,</span>\\n    retrieveFields<span class=\\\"token operator\\\">=</span><span class=\\\"token punctuation\\\">[</span><span class=\\\"token string\\\">\\\"url\\\"</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token string\\\">\\\"title\\\"</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token string\\\">\\\"description\\\"</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">,</span>\\n    query<span class=\\\"token operator\\\">=</span>Query<span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">,</span>\\n    highlight<span class=\\\"token operator\\\">=</span>Highlight<span class=\\\"token punctuation\\\">(</span>\\n        fields<span class=\\\"token operator\\\">=</span><span class=\\\"token punctuation\\\">[</span><span class=\\\"token string\\\">\\\"content\\\"</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token string\\\">\\\"content.analyzed\\\"</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">,</span>\\n        settings<span class=\\\"token operator\\\">=</span>Highlight<span class=\\\"token punctuation\\\">.</span>Settings<span class=\\\"token punctuation\\\">(</span>\\n            pre_tags<span class=\\\"token operator\\\">=</span><span class=\\\"token punctuation\\\">[</span><span class=\\\"token string\\\">\\\"&lt;em>\\\"</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">,</span> post_tags<span class=\\\"token operator\\\">=</span><span class=\\\"token punctuation\\\">[</span><span class=\\\"token string\\\">\\\"&lt;/em>\\\"</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">,</span>\\n    <span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">,</span>\\n<span class=\\\"token punctuation\\\">)</span></code></pre></div>\"\n    }\n  }), \"\\n\", React.createElement(_components.p, null, \"To be able to highlight a field with FVH, the following settings must be enabled when registering the field:\"), \"\\n\", React.createElement(_components.ul, null, \"\\n\", React.createElement(_components.li, null, \"The field must be a \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">TEXT</code>\"\n    }\n  }), \" field\"), \"\\n\", React.createElement(_components.li, null, \"The field must be stored: \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">“store: true”</code>\"\n    }\n  })), \"\\n\", React.createElement(_components.li, null, \"The field must have term vectors with positions and offsets: \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">“termVectors: TERMS_POSITIONS_OFFSETS”</code>\"\n    }\n  })), \"\\n\", React.createElement(_components.li, null, \"While not mandatory, the field must be tokenized for the highlights to be useful: \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">“tokenize: true”</code>\"\n    }\n  })), \"\\n\"), \"\\n\", React.createElement(_components.h2, {\n    id: \"client-side-load-balancing\",\n    style: {\n      position: \"relative\"\n    }\n  }, React.createElement(_components.a, {\n    href: \"#client-side-load-balancing\",\n    \"aria-label\": \"client side load balancing permalink\",\n    className: \"anchor before\"\n  }, React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<svg aria-hidden=\\\"true\\\" focusable=\\\"false\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg>\"\n    }\n  })), \"Client-side load balancing\"), \"\\n\", React.createElement(_components.p, null, \"Client-side load balancing allows gRPC clients to distribute load optimally across available nrtsearch replica servers.\"), \"\\n\", React.createElement(_components.p, null, \"The configuration to distribute the load across replicas, with round robin policy, looks as follows for our python client:\"), \"\\n\", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<div class=\\\"gatsby-highlight\\\" data-language=\\\"python\\\"><pre class=\\\"language-python\\\"><code class=\\\"language-python\\\"><span class=\\\"token keyword\\\">def</span> <span class=\\\"token function\\\">get_search_replica_client</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">:</span>\\n    channel <span class=\\\"token operator\\\">=</span> grpc<span class=\\\"token punctuation\\\">.</span>insecure_channel<span class=\\\"token punctuation\\\">(</span>\\n        <span class=\\\"token string\\\">\\\"replica-node:8000\\\"</span><span class=\\\"token punctuation\\\">,</span> options<span class=\\\"token operator\\\">=</span><span class=\\\"token punctuation\\\">[</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">\\\"grpc.lb_policy_name\\\"</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token string\\\">\\\"round_robin\\\"</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">)</span>\\n    <span class=\\\"token keyword\\\">return</span> LuceneServerStub<span class=\\\"token punctuation\\\">(</span>channel<span class=\\\"token punctuation\\\">)</span></code></pre></div>\"\n    }\n  }), \"\\n\", React.createElement(_components.p, null, React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">replica-node</code>\"\n    }\n  }), \" is a DNS record that resolves to multiple IPs - each running a gRPC server at port \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">8000</code>\"\n    }\n  }), \". The client will distribute requests over the created channel evenly among multiple IPs.\"), \"\\n\", React.createElement(_components.p, null, \"In order to verify that \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">replica-node</code>\"\n    }\n  }), \" resolves to our replica IPs, we can run a \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">dig</code>\"\n    }\n  }), \" command within any of the created docker containers. There are two IP addresses in the response, \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">172.20.0.6</code>\"\n    }\n  }), \" and \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">172.20.0.7</code>\"\n    }\n  }), \", which correspond to the IP addresses of our replicas.\"), \"\\n\", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<div class=\\\"gatsby-highlight\\\" data-language=\\\"text\\\"><pre class=\\\"language-text\\\"><code class=\\\"language-text\\\">dig replica-node\\n\\n; &lt;&lt;>> DiG 9.18.13 &lt;&lt;>> replica-node\\n;; global options: +cmd\\n;; Got answer:\\n;; ->>HEADER&lt;&lt;- opcode: QUERY, status: NOERROR, id: 25431\\n;; flags: qr rd ra; QUERY: 1, ANSWER: 2, AUTHORITY: 0, ADDITIONAL: 0\\n\\n;; QUESTION SECTION:\\n;replica-node.                  IN      A\\n\\n;; ANSWER SECTION:\\nreplica-node.           600     IN      A       172.20.0.6\\nreplica-node.           600     IN      A       172.20.0.7\\n\\n;; Query time: 3 msec\\n;; SERVER: 127.0.0.11#53(127.0.0.11) (UDP)\\n;; WHEN: Sun Apr 16 08:34:39 UTC 2023\\n;; MSG SIZE  rcvd: 86</code></pre></div>\"\n    }\n  }), \"\\n\", React.createElement(_components.p, null, \"Nrtsearch exposes Prometheus \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">/metrics</code>\"\n    }\n  }), \" endpoint. You can set up Grafana dashboards to see how search traffic is balanced between your running replicas.\"), \"\\n\", React.createElement(_components.h2, {\n    id: \"search-ui\",\n    style: {\n      position: \"relative\"\n    }\n  }, React.createElement(_components.a, {\n    href: \"#search-ui\",\n    \"aria-label\": \"search ui permalink\",\n    className: \"anchor before\"\n  }, React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<svg aria-hidden=\\\"true\\\" focusable=\\\"false\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg>\"\n    }\n  })), \"Search UI\"), \"\\n\", React.createElement(_components.p, null, \"Our Search UI is a simple server-side React app. It was bootstrapped with \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">npx create-next-app</code>\"\n    }\n  }), \" command. I used \", React.createElement(_components.a, {\n    href: \"https://github.com/elastic/search-ui\",\n    target: \"_blank\",\n    rel: \"nofollow noopener noreferrer\"\n  }, \"@elastic/search-ui\"), \" React components to define the app UI in \", React.createElement(_components.a, {\n    href: \"https://github.com/jedrazb/nrtsearch-tutorial-website-search/blob/master/search_ui/src/pages/index.tsx\",\n    target: \"_blank\",\n    rel: \"nofollow noopener noreferrer\"\n  }, \"less than 100 lines of frontend code\"), \". The library supports custom connectors. The Search UI is \", React.createElement(_components.a, {\n    href: \"https://github.com/jedrazb/nrtsearch-tutorial-website-search/blob/master/search_ui/src/connector/Connector.tsx\",\n    target: \"_blank\",\n    rel: \"nofollow noopener noreferrer\"\n  }, \"connected\"), \" to our searcher API - a simple Flask server with \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">/search</code>\"\n    }\n  }), \" endpoint.\"), \"\\n\", React.createElement(_components.p, null, \"It was started by running \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">make start</code>\"\n    }\n  }), \" and should be accessible on \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">localhost:3000</code>\"\n    }\n  }), \". You can make a few search queries to see how our custom search ranking works.\"), \"\\n\", React.createElement(ImageComponent, {\n    image: props.data.mdx.frontmatter.blogImages[0],\n    alt: \"Search UI\"\n  }), \"\\n\", React.createElement(_components.h2, {\n    id: \"putting-it-all-together\",\n    style: {\n      position: \"relative\"\n    }\n  }, React.createElement(_components.a, {\n    href: \"#putting-it-all-together\",\n    \"aria-label\": \"putting it all together permalink\",\n    className: \"anchor before\"\n  }, React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<svg aria-hidden=\\\"true\\\" focusable=\\\"false\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg>\"\n    }\n  })), \"Putting it all together\"), \"\\n\", React.createElement(_components.p, null, \"Configuration for every service mentioned in this tutorial is in the \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">docker-compose.yaml</code>\"\n    }\n  }), \" file. In order to start this project locally you need to execute four commands:\"), \"\\n\", React.createElement(_components.ul, null, \"\\n\", React.createElement(_components.li, null, React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">make start</code>\"\n    }\n  }), \" - starts the nrtsearch cluster, search UI and search API server, and the gRPC web UI. It also generates nrtsearch client python code using \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">protoc</code>\"\n    }\n  }), \" compiler.\"), \"\\n\", React.createElement(_components.li, null, React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">make start_index</code>\"\n    }\n  }), \" - starts the \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">blog_search</code>\"\n    }\n  }), \" index\"), \"\\n\", React.createElement(_components.li, null, React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">make run_crawler</code>\"\n    }\n  }), \" - crawls web data\"), \"\\n\", React.createElement(_components.li, null, React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">make run_indexer</code>\"\n    }\n  }), \" - indexes crawled web data\"), \"\\n\"), \"\\n\", React.createElement(_components.p, null, \"You can access the Search UI on your host machine \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">localhost:3000</code>\"\n    }\n  }), \" to issue search queries. The web UI for sending gRPC commands to nrtsearch is available at \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">localhost:6969</code>\"\n    }\n  }), \".\"), \"\\n\", React.createElement(_components.p, null, \"You can index more web data by editing and adding sources to the \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">crawler.py</code>\"\n    }\n  }), \" code. Keep in mind that when crawling websites with scripts, it is crucial to respect the \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">robots.txt</code>\"\n    }\n  }), \" file. Some websites, including Wikipedia offer \", React.createElement(_components.a, {\n    href: \"https://en.wikipedia.org/wiki/Wikipedia:Database_download\",\n    target: \"_blank\",\n    rel: \"nofollow noopener noreferrer\"\n  }, \"database dumps\"), \" to limit unnecessary crawling.\"), \"\\n\", React.createElement(_components.p, null, \"I hope this tutorial is a helpful introduction to data indexing with nrtsearch. Happy hacking!\"));\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? React.createElement(MDXLayout, props, React.createElement(_createMdxContent, props)) : _createMdxContent(props);\n}\nexport default MDXContent;\nfunction _missingMdxReference(id, component) {\n  throw new Error(\"Expected \" + (component ? \"component\" : \"object\") + \" `\" + id + \"` to be defined: you likely forgot to import, pass, or provide it.\");\n}\n","import GATSBY_COMPILED_MDX from \"/Users/jedr/personal-blog/content/tech-blog/nrtsearch-tutorial-website-search/index.mdx\";\nimport React from 'react';\nimport {Link, graphql} from 'gatsby';\nimport get from 'lodash/get';\nimport {MDXProvider} from '@mdx-js/react';\nimport {getSrc} from 'gatsby-plugin-image';\nimport '../fonts/fonts-post.css';\nimport Bio from '../components/Bio';\nimport Layout from '../components/Layout';\nimport SEO from '../components/SEO';\nimport ImageGallery from '../components/ImageGallery';\nimport ImageComponent from '../components/ImageComponent';\nimport LazyIframe from '../components/LazyIframe';\nimport Comments from '../components/Comments';\nimport {Container, Column, MakeItBigContainer, ThreePhotosContainer} from '../components/layout/Container';\nimport {formatPostDate, formatReadingTime} from '../utils/helpers';\nimport {rhythm, scale} from '../utils/typography';\nimport {StatefulSliderPicker, StatefulBlockPicker} from '../components/ColorPicker';\nimport TableOfContents from '../components/TableOfContents';\nimport 'katex/dist/katex.min.css';\nimport './blog-post.css';\nconst shortcodes = {\n  Link,\n  ImageGallery,\n  ImageComponent,\n  Container,\n  Column,\n  MakeItBigContainer,\n  ThreePhotosContainer,\n  LazyIframe,\n  StatefulSliderPicker,\n  StatefulBlockPicker\n};\nclass TechBlogPostTemplate extends React.Component {\n  render() {\n    const {children} = this.props;\n    const post = this.props.data.mdx;\n    const siteTitle = get(this.props, 'data.site.siteMetadata.title');\n    const siteUrl = get(this.props, 'data.site.siteMetadata.siteUrl');\n    let {previous, next} = this.props.pageContext;\n    const ogimage = post.frontmatter.ogimage;\n    const ogImagePath = ogimage && getSrc(ogimage);\n    const category = get(post, 'fields.category');\n    const postUrl = `${siteUrl}/${category}${post.fields.slug}`;\n    const structuredData = {\n      '@context': 'https://schema.org',\n      '@type': 'BlogPosting',\n      headline: post.frontmatter.title,\n      datePublished: post.frontmatter.date,\n      url: postUrl,\n      author: [{\n        '@type': 'Person',\n        name: 'Jedr Blaszyk',\n        url: 'https://j.blaszyk.me/'\n      }]\n    };\n    return React.createElement(Layout, {\n      location: this.props.location,\n      title: siteTitle,\n      tocComponent: React.createElement(TableOfContents, post.tableOfContents)\n    }, React.createElement(SEO, {\n      title: post.frontmatter.title,\n      description: post.frontmatter.spoiler,\n      slug: `/${post.fields.category}${post.fields.slug}`,\n      image: ogImagePath,\n      structuredData: structuredData,\n      meta: [{\n        property: 'og:type',\n        content: 'article'\n      }, {\n        property: 'og:article:published_time',\n        content: post.frontmatter.date\n      }, {\n        property: 'og:article:author',\n        content: 'https://j.blaszyk.me/about/'\n      }]\n    }), React.createElement(\"main\", null, React.createElement(\"article\", {\n      className: \"post\"\n    }, React.createElement(\"header\", {\n      id: \"post-header\"\n    }, React.createElement(\"h1\", {\n      style: {\n        color: 'var(--textTitle)',\n        marginTop: '1.5rem',\n        marginBottom: '0.5rem'\n      }\n    }, post.frontmatter.title), React.createElement(Link, {\n      style: {\n        boxShadow: 'none',\n        textDecoration: 'none',\n        color: 'var(--textLink)',\n        fontFamily: 'Montserrat, sans-serif'\n      },\n      to: `/tech-blog/`,\n      rel: \"bookmark\"\n    }, React.createElement(\"p\", null, 'Tech Blog')), React.createElement(\"p\", {\n      style: {\n        ...scale(-1 / 5),\n        display: 'block',\n        marginBottom: rhythm(1),\n        marginTop: rhythm(-4 / 5)\n      }\n    }, formatPostDate(post.frontmatter.date), React.createElement(\"span\", {\n      style: {\n        margin: '0 0.15rem'\n      }\n    }, ` • `), formatReadingTime(post.fields.timeToRead.minutes))), React.createElement(MDXProvider, {\n      components: shortcodes\n    }, children))), React.createElement(\"aside\", null, React.createElement(\"nav\", null, React.createElement(\"ul\", {\n      style: {\n        display: 'flex',\n        flexWrap: 'wrap',\n        justifyContent: 'space-between',\n        listStyle: 'none',\n        padding: 0,\n        marginLeft: 0\n      }\n    }, React.createElement(\"li\", null, previous && React.createElement(Link, {\n      to: `/${category}${previous.fields.slug}`,\n      rel: \"prev\"\n    }, \"← \", previous.frontmatter.title)), React.createElement(\"li\", null, next && React.createElement(Link, {\n      to: `/${category}${next.fields.slug}`,\n      rel: \"next\"\n    }, next.frontmatter.title, \" →\")))), React.createElement(\"h3\", {\n      style: {\n        fontFamily: 'Montserrat, sans-serif',\n        marginTop: rhythm(0.25)\n      }\n    }, React.createElement(Link, {\n      style: {\n        boxShadow: 'none',\n        textDecoration: 'none',\n        color: 'var(--textLink)',\n        fontSize: rhythm(4 / 5)\n      },\n      to: '/'\n    }, \"Jedr's Blog\"), ' • ', React.createElement(Link, {\n      style: {\n        boxShadow: 'none',\n        textDecoration: 'none',\n        color: 'var(--textLink)',\n        fontSize: rhythm(4 / 5)\n      },\n      to: '/tech-blog/'\n    }, \"Tech Blog\")), React.createElement(\"aside\", {\n      style: {\n        width: '100%',\n        backgroundColor: 'var(--bg-header)',\n        borderRadius: '1em',\n        padding: '1.2em 0.6em',\n        marginBottom: '1.5rem'\n      }\n    }, React.createElement(Bio, {\n      style: {\n        marginBottom: 0\n      },\n      size: \"l\"\n    })), React.createElement(Comments, {\n      url: postUrl,\n      id: post.fields.slug,\n      title: post.frontmatter.title\n    })));\n  }\n}\nTechBlogPostTemplate\nexport default function GatsbyMDXWrapper(props) {\n  return React.createElement(TechBlogPostTemplate, props, React.createElement(GATSBY_COMPILED_MDX, props));\n}\nexport const pageQuery = graphql`\n  query TechBlogPostBySlug($slug: String!) {\n    site {\n      siteMetadata {\n        title\n        author\n        siteUrl\n      }\n    }\n    mdx(fields: { slug: { eq: $slug } }) {\n      id\n      tableOfContents\n      frontmatter {\n        title\n        date(formatString: \"MMMM DD, YYYY\")\n        spoiler\n        ogimage {\n          childImageSharp {\n            gatsbyImageData(width: 960, layout: FIXED)\n          }\n        }\n        images {\n          childImageSharp {\n            gatsbyImageData(width: 1400, layout: CONSTRAINED, quality: 90)\n          }\n        }\n        blogImages {\n          childImageSharp {\n            gatsbyImageData(width: 1400, layout: CONSTRAINED, quality: 90)\n          }\n        }\n      }\n      fields {\n        slug\n        category\n        timeToRead {\n          minutes\n        }\n      }\n    }\n  }\n`;\n"],"names":["_createMdxContent","props","_components","Object","assign","p","a","span","blockquote","h2","ul","li","em","ol","_provideComponents","components","ImageComponent","id","component","Error","_missingMdxReference","React","href","target","rel","dangerouslySetInnerHTML","__html","style","position","className","image","data","mdx","frontmatter","blogImages","alt","wrapper","MDXLayout","shortcodes","Link","ImageGallery","Container","Column","MakeItBigContainer","ThreePhotosContainer","LazyIframe","StatefulSliderPicker","StatefulBlockPicker","TechBlogPostTemplate","_React$Component","apply","arguments","_inheritsLoose","prototype","render","children","this","post","siteTitle","get","siteUrl","previous","next","pageContext","ogimage","ogImagePath","getSrc","category","postUrl","fields","slug","structuredData","headline","title","datePublished","date","url","author","name","Layout","location","tocComponent","TableOfContents","tableOfContents","SEO","description","spoiler","meta","property","content","color","marginTop","marginBottom","boxShadow","textDecoration","fontFamily","to","scale","display","rhythm","formatPostDate","margin","formatReadingTime","timeToRead","minutes","MDXProvider","flexWrap","justifyContent","listStyle","padding","marginLeft","fontSize","width","backgroundColor","borderRadius","Bio","size","Comments","GatsbyMDXWrapper","GATSBY_COMPILED_MDX"],"sourceRoot":""}