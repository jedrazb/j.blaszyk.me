"use strict";(self.webpackChunkj_blaszyk_me=self.webpackChunkj_blaszyk_me||[]).push([[281],{2874:function(e,t,n){n.r(t),n.d(t,{default:function(){return L}});var a=n(7387),s=n(8453),r=n(6540);function l(e){const t=Object.assign({p:"p",a:"a",ul:"ul",li:"li",h2:"h2",span:"span",h3:"h3",strong:"strong",table:"table",thead:"thead",tr:"tr",th:"th",tbody:"tbody",td:"td",h4:"h4"},(0,s.R)(),e.components);return r.createElement(r.Fragment,null,r.createElement(t.p,null,"In the last post ",r.createElement(t.a,{href:"/tech-blog/exploring-apache-lucene-index/"},"Exploring Apache Lucene - Part 1: The Index"),", we took a deep dive to look at the building blocks of the Lucene index. Here is a quick recap of key points:"),"\n",r.createElement(t.ul,null,"\n",r.createElement(t.li,null,"The Lucene index is built using an inverted index, a data structure that maps terms to their corresponding documents. In an inverted index, each term is associated with a list of documents that contain that term. This allows for fast lookups of documents that match a given term or set of terms."),"\n",r.createElement(t.li,null,"The index is split into index segments, which contain a subset of documents, to allow for more efficient searching and a reduction in memory requirements. Segments are never modified in-place, so they can be cached easily by the filesystem. Segments can be searched concurrently lock-free, with no risk of race conditions. It also allows concurrent query execution."),"\n",r.createElement(t.li,null,"It is not just about inverted indexes in Lucene. For example, doc values are a columnar data structure that stores the values of a field for each document in the index. It allows for fast lookups of field values without having to load the entire document - useful for efficient sorting and faceting."),"\n"),"\n",r.createElement(t.p,null,"Now let’s focus on what factors enable Lucene to be so effective at search and ranking, and how its design makes it suitable to run at scale. But let’s not forget that the true value of Lucene is its community - hundreds of developers who have committed to the project since it was open-sourced in 2001."),"\n",r.createElement(t.h2,{id:"efficient-search",style:{position:"relative"}},r.createElement(t.a,{href:"#efficient-search","aria-label":"efficient search permalink",className:"anchor before"},r.createElement(t.span,{dangerouslySetInnerHTML:{__html:'<svg aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg>'}})),"Efficient search"),"\n",r.createElement(t.h3,{id:"index-data-structures",style:{position:"relative"}},r.createElement(t.a,{href:"#index-data-structures","aria-label":"index data structures permalink",className:"anchor before"},r.createElement(t.span,{dangerouslySetInnerHTML:{__html:'<svg aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg>'}})),"Index data structures"),"\n",r.createElement(t.p,null,"One of the key reasons for Lucene’s performance is its efficient use of data structures. Inverted index and doc values are effective for fast lookups for different query types, while index segments ensure efficient resource consumption and concurrent read access for queries. There are still more “tricks” that Lucene uses to optimize query performance."),"\n",r.createElement(t.p,null,r.createElement(t.strong,null,"Bitsets")," are used in Lucene to represent sets of documents that match a particular query. Bitsets use one bit to represent the presence or absence of a document in the set, which makes them very compact and efficient to use. Bitsets can also be applied to perform Boolean operations on sets of documents. For example, Lucene can leverage bitsets to efficiently perform OR, AND, and NOT operations, allowing complex queries to be executed quickly and efficiently. Moreover, bitsets are used to handle delete operations - documents in the segment as marked as deleted deleted - until the documents are actually removed during the segment merge."),"\n",r.createElement(t.p,null,r.createElement(t.strong,null,"Caches")," help to improve Lucene’s search performance. The field cache is used to cache field values across multiple documents, while the filter cache is used to cache the results of expensive filters. Filter caches are encoded as bitsets to determine which document match the filter. The query cache is used to cache the results of previously executed queries. If a subsequent query is found to be identical to a previously executed query, the cached result can be returned instead of executing the query again."),"\n",r.createElement(t.p,null,"Lucene also uses ",r.createElement(t.strong,null,r.createElement(t.a,{href:"https://en.wikipedia.org/wiki/Finite-state_transducer",target:"_blank",rel:"nofollow noopener noreferrer"},"finite-state transducers"))," (FSTs) - they are compact and efficient data structures that allow for fast lookups of key-value pairs. It’s used for features like auto-suggest and spell-checking - Lucene uses the FST to efficiently look up all possible completions of the partially typed, or misspelled query. FSTs provide fast lookups of term frequencies, prefixes and other metadata associated with each term, useful in a variety of search-related operations. More about this data structure can be read in: ",r.createElement(t.a,{href:"https://blog.mikemccandless.com/2010/12/using-finite-state-transducers-in.html",target:"_blank",rel:"nofollow noopener noreferrer"},"Using Finite State Transducers in Lucene"),"."),"\n",r.createElement(t.p,null,r.createElement(t.strong,null,"Block trees")," are used to represent the posting list - a set of doc ids and offsets associated with each term in an inverted index. By compressing the posting lists, Lucene can reduce the amount of disk I/O required to access the posting lists during search operations. This can result in significant performance improvements, especially when dealing with large indexes. Block trees are also used to implement skip lists, which allow for fast skipping over irrelevant documents during search operations. Skip lists are used to quickly navigate the posting lists associated with each term in a search index, allowing for fast identification of relevant documents."),"\n",r.createElement(t.h3,{id:"query-types",style:{position:"relative"}},r.createElement(t.a,{href:"#query-types","aria-label":"query types permalink",className:"anchor before"},r.createElement(t.span,{dangerouslySetInnerHTML:{__html:'<svg aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg>'}})),"Query Types"),"\n",r.createElement(t.p,null,"Lucene’s extensive support for different query types allows its community to build sophisticated search applications that can handle a wide range of use cases. Lucene query types are modular, therefore making it possible to combine different queries to create more complex search queries."),"\n",r.createElement(t.p,null,"Here are some commonly used Lucene query types."),"\n",r.createElement(t.table,null,r.createElement(t.thead,null,r.createElement(t.tr,null,r.createElement(t.th,null,"Query"),r.createElement(t.th,null,"Role"))),r.createElement(t.tbody,null,r.createElement(t.tr,null,r.createElement(t.td,null,"Term Query"),r.createElement(t.td,null,"matches documents that contain a specific term")),r.createElement(t.tr,null,r.createElement(t.td,null,"Phrase Query"),r.createElement(t.td,null,"matches documents that contain a specific sequence of terms in order")),r.createElement(t.tr,null,r.createElement(t.td,null,"Boolean Query"),r.createElement(t.td,null,"allows for the combination of multiple queries using boolean operators such as AND, OR, and NOT")),r.createElement(t.tr,null,r.createElement(t.td,null,"Fuzzy Query"),r.createElement(t.td,null,"matches documents that contain similar terms to a specified term")),r.createElement(t.tr,null,r.createElement(t.td,null,"Wildcard Query"),r.createElement(t.td,null,"matches documents that contain terms that match a specified pattern")),r.createElement(t.tr,null,r.createElement(t.td,null,"Range Query"),r.createElement(t.td,null,"matches documents that contain terms within a specified range")),r.createElement(t.tr,null,r.createElement(t.td,null,"Prefix Query"),r.createElement(t.td,null,"matches documents that contain terms that begin with a specified prefix")),r.createElement(t.tr,null,r.createElement(t.td,null,"Multi-term Query"),r.createElement(t.td,null,"matches documents that contain multiple terms")),r.createElement(t.tr,null,r.createElement(t.td,null,"Boost Query"),r.createElement(t.td,null,"allows for the boosting of certain queries to give them more weight in the search results")))),"\n",r.createElement(t.p,null,"Let’s look at an example query. Assume you have a set of bikepacking blog posts - all indexed in Lucene so that they can be easily searchable. If you are looking for an adventure in Norway, where the distance covered is between 300 and 800km, you can construct the following Lucene query:"),"\n",r.createElement(t.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="sql"><pre class="language-sql"><code class="language-sql"><span class="token punctuation">(</span>title:bikepacking norway<span class="token operator">^</span><span class="token number">2</span> <span class="token operator">OR</span> content:bikepacking norway<span class="token punctuation">)</span> <span class="token operator">AND</span> distance:<span class="token punctuation">[</span><span class="token number">300</span> <span class="token keyword">TO</span> <span class="token number">800</span><span class="token punctuation">]</span>\n</code></pre></div>'}}),"\n",r.createElement(t.p,null,"This query searches for documents that meet the following criteria (Boolean query with subqueries joined by ",r.createElement(t.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">AND</code>'}})," and ",r.createElement(t.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">OR</code>'}})," operators):"),"\n",r.createElement(t.ul,null,"\n",r.createElement(t.li,null,"must contain the term ",r.createElement(t.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">"bikepacking norway"</code>'}})," in either the title or the content field (Multi-term query). The boost operator ",r.createElement(t.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">^</code>'}})," is used to boost the score of documents that contain the term in the title field (Boost query)"),"\n",r.createElement(t.li,null,"must have a distance between 300 and 800 (Range query)"),"\n"),"\n",r.createElement(t.h3,{id:"concurrent-query-execution",style:{position:"relative"}},r.createElement(t.a,{href:"#concurrent-query-execution","aria-label":"concurrent query execution permalink",className:"anchor before"},r.createElement(t.span,{dangerouslySetInnerHTML:{__html:'<svg aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg>'}})),"Concurrent query execution"),"\n",r.createElement(t.p,null,"The concurrency model for a Lucene application is one thread per query at search time, but it’s also possible to execute a single query concurrently using multiple threads to greatly reduce the time of the slowest queries. A Lucene index is segmented, which makes searching it an embarrassingly parallel problem: each query must visit all segments in the index, collecting their globally competitive hits."),"\n",r.createElement(t.p,null,"When the query is single-threaded, that one query thread must visit all segments sequentially. If the index is large, and the queries are costly, those queries will require high CPU cost and wall clock time to find the top hits."),"\n",r.createElement(t.p,null,"When a query is run in multi-threaded mode, the segments in the index are first grouped up front into single thread work units called thread slices. By default, large segments belong to their own thread slice and smaller segments will be put together into a single thread slice, since they are presumably quick to search sequentially by a single thread. But, even though searching a Lucene index is a naturally and embarrassingly parallel problem, using multiple threads for one query incurs an inherent coordination overhead."),"\n",r.createElement(t.p,null,"Concurrent query execution feature is still missing from popular search engines based on Lucene like Elasticsearch, but it’s supported in ",r.createElement(t.a,{href:"https://github.com/Yelp/nrtsearch",target:"_blank",rel:"nofollow noopener noreferrer"},"nrtsearch"),"."),"\n",r.createElement(t.h2,{id:"document-scoring",style:{position:"relative"}},r.createElement(t.a,{href:"#document-scoring","aria-label":"document scoring permalink",className:"anchor before"},r.createElement(t.span,{dangerouslySetInnerHTML:{__html:'<svg aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg>'}})),"Document scoring"),"\n",r.createElement(t.p,null,"Lucene scoring uses a combination of the ",r.createElement(t.a,{href:"https://en.wikipedia.org/wiki/Vector_space_model",target:"_blank",rel:"nofollow noopener noreferrer"},"Vector Space Model")," (VSM) and the Boolean model to determine how relevant a given document is to a user’s query. In general, the idea behind the VSM is that the more times a query term appears in a document relative to the number of times the term appears in all the documents in the collection, the more relevant that document is to the query. It uses the boolean model to first narrow down the documents that need to be scored based on the use of boolean logic in the query specification."),"\n",r.createElement(t.p,null,"The ",r.createElement(t.a,{href:"https://en.wikipedia.org/wiki/Okapi_BM25",target:"_blank",rel:"nofollow noopener noreferrer"},"BM25")," algorithm - which stands for “Best Match 25” - is a variant of the Vector Space Model that takes into account document length and term frequency. It is used in Lucene as a default scoring VSM. The algorithm calculates a relevance score for each document based on the following formula:"),"\n",r.createElement(t.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="python"><pre class="language-python"><code class="language-python">score<span class="token punctuation">(</span>q<span class="token punctuation">,</span> d<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token builtin">sum</span><span class="token punctuation">(</span>weight<span class="token punctuation">(</span>t<span class="token punctuation">,</span> d<span class="token punctuation">)</span> <span class="token operator">*</span> weight<span class="token punctuation">(</span>t<span class="token punctuation">,</span> q<span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre></div>'}}),"\n",r.createElement(t.p,null,"where ",r.createElement(t.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">score(q, d)</code>'}})," is the relevance score for the document ",r.createElement(t.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">d</code>'}})," with respect to the query ",r.createElement(t.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">q</code>'}}),", ",r.createElement(t.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">weight(t, d)</code>'}})," is the weight of the term ",r.createElement(t.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">t</code>'}})," in the document ",r.createElement(t.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">d</code>'}}),", and ",r.createElement(t.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">weight(t, q)</code>'}})," is the weight of the term ",r.createElement(t.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">t</code>'}})," in the query ",r.createElement(t.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">q</code>'}}),". The weights are a function of:"),"\n",r.createElement(t.ul,null,"\n",r.createElement(t.li,null,"term ",r.createElement(t.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">t</code>'}})," frequency in document ",r.createElement(t.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">d</code>'}}),","),"\n",r.createElement(t.li,null,"total number of documents containing term ",r.createElement(t.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">t</code>'}})," and total number of docs in the index,"),"\n",r.createElement(t.li,null,"length of the document ",r.createElement(t.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">d</code>'}})," and the average document length in the index,"),"\n",r.createElement(t.li,null,"tuning parameters that control the effect of term frequency and document length on the relevance score."),"\n"),"\n",r.createElement(t.h4,{id:"custom-similarity-scoring",style:{position:"relative"}},r.createElement(t.a,{href:"#custom-similarity-scoring","aria-label":"custom similarity scoring permalink",className:"anchor before"},r.createElement(t.span,{dangerouslySetInnerHTML:{__html:'<svg aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg>'}})),"Custom similarity scoring"),"\n",r.createElement(t.p,null,"While the BM25 algorithm works well for many search use cases, it may not be suitable for all applications. In some cases, you may need to customize the similarity scoring algorithm to better match the specific needs of your application. Such cases include:"),"\n",r.createElement(t.ul,null,"\n",r.createElement(t.li,null,"Domain-specific ranking factors - different search applications may have different ranking factors that are important for relevance"),"\n",r.createElement(t.li,null,"Personalization - user-specific features and signals, such as the user’s preferences or search history, can be incorporated into the search results to provide more personalized and relevant results"),"\n"),"\n",r.createElement(t.p,null,"Lucene supports defining custom ",r.createElement(t.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">Similarity</code>'}})," scorers - it can be a custom algorithm or a continuously retrained ML model. All you need to do then is specify your custom scorer class in the search query."),"\n",r.createElement(t.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="java"><pre class="language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CustomSimilarity</span> <span class="token keyword">extends</span> <span class="token class-name">Similarity</span> <span class="token punctuation">{</span>\n\n    <span class="token keyword">public</span> <span class="token keyword">float</span> <span class="token function">score</span><span class="token punctuation">(</span><span class="token class-name">BasicStats</span> stats<span class="token punctuation">,</span> <span class="token keyword">float</span> freq<span class="token punctuation">,</span> <span class="token keyword">float</span> docLen<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\n        <span class="token keyword">float</span> score <span class="token operator">=</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token comment">// your magic code</span>\n        <span class="token keyword">return</span> score<span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span></code></pre></div>'}}),"\n",r.createElement(t.p,null,"The document scoring mechanism allows Lucene to return highly relevant search results, given a user query, even in large and complex index."),"\n",r.createElement(t.p,null,"In the next post, ",r.createElement(t.a,{href:"/tech-blog/exploring-apache-lucene-scale/"},"Exploring Apache Lucene - Part 3: Running at Scale"),", I will investigate different architectures that make it possible to run Apache Lucene at scale."))}var o=function(e){void 0===e&&(e={});const{wrapper:t}=Object.assign({},(0,s.R)(),e.components);return t?r.createElement(t,e,r.createElement(l,e)):l(e)},c=n(4794),i=n(8156),u=n.n(i),d=n(2532),h=n(39),m=n(56),p=n(2907),g=n(9379),f=n(5181),y=n(3303),k=n(4799),E=n(1863),b=n(7821),v=n(5765),w=n(4039),x=n(4310);const q={Link:c.Link,ImageGallery:g.A,ImageComponent:f.A,Container:E.mc,Column:E.VP,MakeItBigContainer:E.r,ThreePhotosContainer:E.Rq,LazyIframe:y.A,StatefulSliderPicker:w.a,StatefulBlockPicker:w.A};let S=function(e){function t(){return e.apply(this,arguments)||this}return(0,a.A)(t,e),t.prototype.render=function(){const{children:e}=this.props,t=this.props.data.mdx,n=u()(this.props,"data.site.siteMetadata.title"),a=u()(this.props,"data.site.siteMetadata.siteUrl");let{previous:l,next:o}=this.props.pageContext;const i=t.frontmatter.ogimage,g=i&&(0,d.d)(i),f=u()(t,"fields.category"),y=a+"/"+f+t.fields.slug,E={"@context":"https://schema.org","@type":"BlogPosting",headline:t.frontmatter.title,datePublished:t.frontmatter.date,url:y,author:[{"@type":"Person",name:"Jedr Blaszyk",url:"https://j.blaszyk.me/"}]};return r.createElement(m.A,{location:this.props.location,title:n,tocComponent:r.createElement(x.A,t.tableOfContents)},r.createElement(p.A,{title:t.frontmatter.title,description:t.frontmatter.spoiler,slug:t.fields.slug,image:g,structuredData:E}),r.createElement("main",null,r.createElement("article",{className:"post"},r.createElement("header",{id:"post-header"},r.createElement("h1",{style:{color:"var(--textTitle)",marginTop:"1.5rem",marginBottom:"0.5rem"}},t.frontmatter.title),r.createElement(c.Link,{style:{boxShadow:"none",textDecoration:"none",color:"var(--textLink)",fontFamily:"Montserrat, sans-serif"},to:"/tech-blog/",rel:"bookmark"},r.createElement("p",null,"Tech Blog")),r.createElement("p",{style:{...(0,v.hs)(-.2),display:"block",marginBottom:(0,v.di)(1),marginTop:(0,v.di)(-.8)}},(0,b.Wy)(t.frontmatter.date),r.createElement("span",{style:{margin:"0 0.15rem"}}," • "),(0,b.Bt)(t.fields.timeToRead.minutes))),r.createElement(s.x,{components:q},e))),r.createElement("aside",null,r.createElement("nav",null,r.createElement("ul",{style:{display:"flex",flexWrap:"wrap",justifyContent:"space-between",listStyle:"none",padding:0,marginLeft:0}},r.createElement("li",null,l&&r.createElement(c.Link,{to:"/"+f+l.fields.slug,rel:"prev"},"← ",l.frontmatter.title)),r.createElement("li",null,o&&r.createElement(c.Link,{to:"/"+f+o.fields.slug,rel:"next"},o.frontmatter.title," →")))),r.createElement("h3",{style:{fontFamily:"Montserrat, sans-serif",marginTop:(0,v.di)(.25)}},r.createElement(c.Link,{style:{boxShadow:"none",textDecoration:"none",color:"var(--textLink)",fontSize:(0,v.di)(.8)},to:"/"},"Jedr's Blog")," • ",r.createElement(c.Link,{style:{boxShadow:"none",textDecoration:"none",color:"var(--textLink)",fontSize:(0,v.di)(.8)},to:"/tech-blog/"},"Tech Blog")),r.createElement(h.A),r.createElement(k.A,{url:y,id:t.fields.slug,title:t.frontmatter.title})))},t}(r.Component);function L(e){return r.createElement(S,e,r.createElement(o,e))}}}]);
//# sourceMappingURL=component---src-templates-tech-blog-post-js-content-file-path-content-tech-blog-exploring-apache-lucene-search-and-ranking-index-mdx-13a90db59cc7853d2c77.js.map