{"version":3,"file":"component---src-pages-contact-js-12d09e8e7fc3aae54fc3.js","mappings":"mJAsBA,SAASA,EAAT,GAQI,IAPFC,EAOC,EAPDA,KACAC,EAMC,EANDA,MACAC,EAKC,EALDA,MACAC,EAIC,EAJDA,YACAC,EAGC,EAHDA,KAGC,IAFDC,KAAAA,OAEC,MAFM,KAEN,MADDC,eAAAA,OACC,MADgB,KAChB,EACD,OACE,gBAAC,EAAAC,YAAD,CACEC,MA5BK,aA6BLC,OAAQ,SAACC,GACP,IAAQC,EAAiBD,EAAKE,KAAtBD,aACFE,EAAkBV,GAAeQ,EAAaR,YAE9CW,GADeH,EAAaI,QAAUJ,EAAaV,MAChD,GAAMU,EAAaI,QAAUX,GAChCY,EAAiB,GAAML,EAAaI,QAAUd,EACpD,OACE,gBAAC,IAAD,eACEgB,eAAgB,CAAEZ,KAAAA,IACbH,EACD,CACEgB,cAAc,QAASP,EAAaT,MACpCA,MAAAA,GAEF,CACEA,MAAM,GAAIS,EAAaT,OAR/B,CAUEF,KAAM,CACJ,CACEmB,KAAM,cACNC,QAASP,GAEX,CACEQ,SAAU,SACVD,QAASN,GAEX,CACEO,SAAU,WACVD,QAASlB,GAASS,EAAaT,OAEjC,CACEmB,SAAU,iBACVD,QAASP,GAEX,CACEQ,SAAU,eACVD,QAAST,EAAaT,OAExB,CACEmB,SAAU,SACVD,QAAS,iBAEX,CACED,KAAM,eACNC,QAAS,WAEX,CACED,KAAM,kBACNC,QAAST,EAAaW,OAAOC,SAE/B,CACEJ,KAAM,gBACNC,QAASlB,GAASS,EAAaT,OAEjC,CACEiB,KAAM,sBACNC,QAASP,IAGVW,OACCvB,EACI,CACE,CACEoB,SAAU,WACVD,QAASJ,GAEX,CACEG,KAAM,gBACNC,QAASJ,IAGb,IAELQ,OAAOxB,KAGTM,GACC,0BAAQmB,KAAK,uBACVC,KAAKC,UAAUrB,QAUhCP,EAAI6B,aAAe,CACjB5B,KAAM,GACNE,MAAO,GACPE,KAAM,IAWR,O,qGChIMyB,EAAAA,SAAAA,GAAAA,SAAAA,IAAAA,OAAAA,EAAAA,MAAAA,KAAAA,YAAAA,KA0BH,OA1BGA,EAAAA,EAAAA,GAAAA,EAAAA,GAAAA,EAAAA,UACJpB,OAAA,WACE,IAAMqB,EAAYC,GAAAA,CAAIC,KAAM,sCAC5B,OACE,gBAAC,IAAD,CAAQC,SAAUD,KAAKE,MAAMD,SAAU/B,MAAO4B,GAC5C,gBAAC,IAAD,CAAK5B,MAAO,UAAWE,KAAM,aAC7B,4BACE,sBAAI+B,MAAO,CAAEC,UAAW,IAAxB,WACA,kFACyD,IACvD,qBAAGC,KAAK,0BAA0BC,OAAO,UAAzC,WAFF,6DAK6D,IAC3D,qBAAGD,KAAK,wBAAwBC,OAAO,UAAvC,QANF,KAWA,gDACsB,qBAAGD,KAAK,uBAAR,gBAA+C,KAErE,oDAIP,EA1BGR,CAAqBU,EAAAA,WAwC3B","sources":["webpack://j.blaszyk.me/./src/components/SEO.js","webpack://j.blaszyk.me/./src/pages/contact.js"],"sourcesContent":["import React from 'react';\nimport Helmet from 'react-helmet';\nimport PropTypes from 'prop-types';\nimport { StaticQuery, graphql } from 'gatsby';\n\nconst query = graphql`\n  query GetSiteMetadata {\n    site {\n      siteMetadata {\n        title\n        author\n        description\n        siteUrl\n        social {\n          twitter\n        }\n        image\n      }\n    }\n  }\n`;\n\nfunction SEO({\n  meta,\n  image,\n  title,\n  description,\n  slug,\n  lang = 'en',\n  structuredData = null,\n}) {\n  return (\n    <StaticQuery\n      query={query}\n      render={(data) => {\n        const { siteMetadata } = data.site;\n        const metaDescription = description || siteMetadata.description;\n        const metaImage = `${siteMetadata.siteUrl}${siteMetadata.image}`;\n        const url = `${siteMetadata.siteUrl}${slug}`;\n        const ogCustomImagePath = `${siteMetadata.siteUrl}${image}`;\n        return (\n          <Helmet\n            htmlAttributes={{ lang }}\n            {...(title\n              ? {\n                  titleTemplate: `%s â€” ${siteMetadata.title}`,\n                  title,\n                }\n              : {\n                  title: `${siteMetadata.title}`,\n                })}\n            meta={[\n              {\n                name: 'description',\n                content: metaDescription,\n              },\n              {\n                property: 'og:url',\n                content: url,\n              },\n              {\n                property: 'og:title',\n                content: title || siteMetadata.title,\n              },\n              {\n                property: 'og:description',\n                content: metaDescription,\n              },\n              {\n                property: 'og:site_name',\n                content: siteMetadata.title,\n              },\n              {\n                property: 'robots',\n                content: 'index, follow',\n              },\n              {\n                name: 'twitter:card',\n                content: 'summary',\n              },\n              {\n                name: 'twitter:creator',\n                content: siteMetadata.social.twitter,\n              },\n              {\n                name: 'twitter:title',\n                content: title || siteMetadata.title,\n              },\n              {\n                name: 'twitter:description',\n                content: metaDescription,\n              },\n            ]\n              .concat(\n                image\n                  ? [\n                      {\n                        property: 'og:image',\n                        content: ogCustomImagePath,\n                      },\n                      {\n                        name: 'twitter:image',\n                        content: ogCustomImagePath,\n                      },\n                    ]\n                  : []\n              )\n              .concat(meta)}\n          >\n            {/* Structured data for rich SEO snippets */}\n            {structuredData && (\n              <script type=\"application/ld+json\">\n                {JSON.stringify(structuredData)}\n              </script>\n            )}\n          </Helmet>\n        );\n      }}\n    />\n  );\n}\n\nSEO.defaultProps = {\n  meta: [],\n  title: '',\n  slug: '',\n};\n\nSEO.propTypes = {\n  description: PropTypes.string,\n  image: PropTypes.string,\n  meta: PropTypes.array,\n  slug: PropTypes.string,\n  title: PropTypes.string.isRequired,\n};\n\nexport default SEO;\n","import React from 'react';\nimport { Link, graphql } from 'gatsby';\n\nimport get from 'lodash/get';\n\nimport Layout from '../components/Layout';\nimport SEO from '../components/SEO';\n\nclass NotFoundPage extends React.Component {\n  render() {\n    const siteTitle = get(this, 'props.data.site.siteMetadata.title');\n    return (\n      <Layout location={this.props.location} title={siteTitle}>\n        <SEO title={'Contact'} slug={'/contact'} />\n        <main>\n          <h1 style={{ marginTop: 0 }}>Contact</h1>\n          <p>\n            I'm a software engineer working on Enterprise Search @{' '}\n            <a href=\"https://www.elastic.co/\" target=\"_blank\">\n              Elastic\n            </a>\n            . Before, I worked on ranking systems and data ingestion @{' '}\n            <a href=\"https://www.yelp.com/\" target=\"_blank\">\n              Yelp\n            </a>\n            .\n          </p>\n          <p>\n            You can reach me at <a href=\"mailto:j@blaszyk.me\">j@blaszyk.me</a>{' '}\n          </p>\n          <p>Have a great day! :)</p>\n        </main>\n      </Layout>\n    );\n  }\n}\n\nexport const pageQuery = graphql`\n  {\n    site {\n      siteMetadata {\n        title\n        description\n      }\n    }\n  }\n`;\n\nexport default NotFoundPage;\n"],"names":["SEO","meta","image","title","description","slug","lang","structuredData","StaticQuery","query","render","data","siteMetadata","site","metaDescription","url","siteUrl","ogCustomImagePath","htmlAttributes","titleTemplate","name","content","property","social","twitter","concat","type","JSON","stringify","defaultProps","NotFoundPage","siteTitle","get","this","location","props","style","marginTop","href","target","React"],"sourceRoot":""}